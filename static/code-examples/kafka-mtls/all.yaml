apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-kafka-mtls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: myclient-go
  namespace: otterize-tutorial-kafka-mtls
data:
  myclient.go: |
    package main

    import (
        "crypto/tls"
        "crypto/x509"
        "fmt"
        "github.com/Shopify/sarama"
        "github.com/sirupsen/logrus"
        "io/ioutil"
        "time"
    )
    
    const (
        kafkaAddr     = "kafka.kafka:9092"
        testTopicName = "mytopic"
        certFile      = "/var/otterize/credentials/cert.pem"
        keyFile       = "/var/otterize/credentials/key.pem"
        rootCAFile    = "/var/otterize/credentials/ca.pem"
    )
    
    func getTLSConfig() (*tls.Config, error) {
        cert, err := tls.LoadX509KeyPair(certFile, keyFile)
        if err != nil {
            return nil, fmt.Errorf("failed loading x509 key pair: %w", err)
        }
    
        pool := x509.NewCertPool()
        rootCAPEM, err := ioutil.ReadFile(rootCAFile)
        if err != nil {
            return nil, fmt.Errorf("failed loading root CA PEM file: %w ", err)
        }
        pool.AppendCertsFromPEM(rootCAPEM)
    
        return &tls.Config{
            Certificates: []tls.Certificate{cert},
            RootCAs:      pool,
        }, nil
    }
    
    func send_messages(producer sarama.SyncProducer) {
        i := 1
        for {
          msg := fmt.Sprintf("Message %d [sent by client]", i)
          _, _, err := producer.SendMessage(&sarama.ProducerMessage{
              Topic:     testTopicName,
              Partition: -1,
              Value:     sarama.StringEncoder(msg),
          })
          if err != nil {
              return
          }
          fmt.Printf("Sent message - %s\n", msg)
          time.Sleep(2 * time.Second)
          i++
        }
    }
    
    func loop_kafka() error {
        addrs := []string{kafkaAddr}
    
        config := sarama.NewConfig()
        fmt.Println("Loading mTLS certificates")
        config.Net.TLS.Enable = true
        tlsConfig, err := getTLSConfig()
        if err != nil {
            return err
        }
        config.Net.TLS.Config = tlsConfig
        fmt.Println("Connecting to Kafka")
        config.Net.DialTimeout = 5 * time.Second
        config.Net.ReadTimeout = 5 * time.Second
        config.Net.WriteTimeout = 5 * time.Second
        client, err := sarama.NewClient(addrs, config)
        if err != nil {
            return err
        }
        fmt.Println("Creating a producer and a consumer for -", testTopicName)
        config.Producer.Return.Successes = true
        config.Producer.Timeout = 5 * time.Second
        config.Consumer.MaxWaitTime = 5 * time.Second
        config.Producer.Return.Errors = true
        config.Consumer.Return.Errors = true
        producer, err := sarama.NewSyncProducerFromClient(client)
        if err != nil {
            return err
        }
    
        consumer, err := sarama.NewConsumerFromClient(client)
        if err != nil {
            return err
        }
        fmt.Println("Sending messages")
        go send_messages(producer)
    
        partConsumer, err := consumer.ConsumePartition(testTopicName, 0, 0)
        if err != nil {
            return err
        }
    
        for msg := range partConsumer.Messages() {
            fmt.Printf("Read message - %s\n", msg.Value)
        }
        return nil
    }
    
    func main() {
        for {
            err := loop_kafka()
            logrus.WithError(err).Println()
            fmt.Println("Loop exited")
            time.Sleep(2 * time.Second)
        }
    }


  go.mod: |
    module main
            
            go 1.18
            
            require (
            github.com/Shopify/sarama v1.36.0
            github.com/sirupsen/logrus v1.9.0
            )
            
            require (
            github.com/davecgh/go-spew v1.1.1 // indirect
            github.com/eapache/go-resiliency v1.3.0 // indirect
            github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect
            github.com/eapache/queue v1.1.0 // indirect
            github.com/golang/snappy v0.0.4 // indirect
            github.com/hashicorp/errwrap v1.0.0 // indirect
            github.com/hashicorp/go-multierror v1.1.1 // indirect
            github.com/hashicorp/go-uuid v1.0.3 // indirect
            github.com/jcmturner/aescts/v2 v2.0.0 // indirect
            github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
            github.com/jcmturner/gofork v1.7.6 // indirect
            github.com/jcmturner/gokrb5/v8 v8.4.3 // indirect
            github.com/jcmturner/rpc/v2 v2.0.3 // indirect
            github.com/klauspost/compress v1.15.9 // indirect
            github.com/pierrec/lz4/v4 v4.1.15 // indirect
            github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
            golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa // indirect
            golang.org/x/net v0.0.0-20220809184613-07c6da5e1ced // indirect
            golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10 // indirect
            )
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myclient
  namespace: otterize-tutorial-kafka-mtls
spec:
  selector:
    matchLabels:
      app: myclient
  template:
    metadata:
      labels:
        app: myclient
      annotations:
        credentials-operator.otterize.com/tls-secret-name: myclient-credentials-secret
    spec:
      containers:
        - name: myclient
          image: golang
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do cd /app; cp src/* .; go get main; go run .; sleep infinity; done" ]
          volumeMounts:
            - name: ephemeral
              mountPath: /app
            - mountPath: /app/src
              name: myclient-go
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: myclient-go
          configMap:
            name: myclient-go
        - name: otterize-credentials
          secret:
            secretName: myclient-credentials-secret
        - name: ephemeral
          emptyDir: { }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: myclient-other-go
  namespace: otterize-tutorial-kafka-mtls
data:
  myclient-other.go: |
    package main
    
    import (
        "crypto/tls"
        "crypto/x509"
        "fmt"
        "github.com/Shopify/sarama"
        "github.com/sirupsen/logrus"
        "io/ioutil"
        "time"
    )
    
    const (
        kafkaAddr     = "kafka.kafka:9092"
        testTopicName = "mytopic"
        certFile      = "/var/otterize/credentials/cert.pem"
        keyFile       = "/var/otterize/credentials/key.pem"
        rootCAFile    = "/var/otterize/credentials/ca.pem"
    )
    
    func getTLSConfig() (*tls.Config, error) {
        cert, err := tls.LoadX509KeyPair(certFile, keyFile)
        if err != nil {
            return nil, fmt.Errorf("failed loading x509 key pair: %w", err)
        }

        pool := x509.NewCertPool()
        rootCAPEM, err := ioutil.ReadFile(rootCAFile)
        if err != nil {
            return nil, fmt.Errorf("failed loading root CA PEM file: %w ", err)
        }
        pool.AppendCertsFromPEM(rootCAPEM)
        
        return &tls.Config{
            Certificates: []tls.Certificate{cert},
            RootCAs:      pool,
        }, nil
    }

    func loop_kafka() error {
        addrs := []string{kafkaAddr}
        
        config := sarama.NewConfig()
        fmt.Println("Loading mTLS certificates")
        config.Net.TLS.Enable = true
        tlsConfig, err := getTLSConfig()
        if err != nil {
            return err
        }
        config.Net.TLS.Config = tlsConfig
        fmt.Println("Connecting to Kafka")
        config.Net.DialTimeout = 5 * time.Second
        config.Net.ReadTimeout = 5 * time.Second
        config.Net.WriteTimeout = 5 * time.Second
        client, err := sarama.NewClient(addrs, config)
        if err != nil {
            return err
        }
        fmt.Println("Creating a producer for -", testTopicName)
        config.Producer.Return.Successes = true
        config.Producer.Timeout = 5 * time.Second
        config.Producer.Return.Errors = true
        producer, err := sarama.NewSyncProducerFromClient(client)
        if err != nil {
            return err
        }

        fmt.Println("Sending messages")
        i := 1
        for {
          msg := fmt.Sprintf("Message %d [sent by client-other]", i)
          _, _, err = producer.SendMessage(&sarama.ProducerMessage{
              Topic:     testTopicName,
              Partition: -1,
              Value:     sarama.StringEncoder(msg),
          })
          if err != nil {
              return err
          }
          fmt.Printf("Sent message - %s\n", msg)
          time.Sleep(1 * time.Second)
          i++
        }
        return nil
    }

    func main() {
        for {
            err := loop_kafka()
            logrus.WithError(err).Println()
            fmt.Println("Loop exited")
            time.Sleep(2 * time.Second)
        }
    }


  go.mod: |
    module main
            
            go 1.18
            
            require (
            github.com/Shopify/sarama v1.36.0
            github.com/sirupsen/logrus v1.9.0
            )
            
            require (
            github.com/davecgh/go-spew v1.1.1 // indirect
            github.com/eapache/go-resiliency v1.3.0 // indirect
            github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect
            github.com/eapache/queue v1.1.0 // indirect
            github.com/golang/snappy v0.0.4 // indirect
            github.com/hashicorp/errwrap v1.0.0 // indirect
            github.com/hashicorp/go-multierror v1.1.1 // indirect
            github.com/hashicorp/go-uuid v1.0.3 // indirect
            github.com/jcmturner/aescts/v2 v2.0.0 // indirect
            github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
            github.com/jcmturner/gofork v1.7.6 // indirect
            github.com/jcmturner/gokrb5/v8 v8.4.3 // indirect
            github.com/jcmturner/rpc/v2 v2.0.3 // indirect
            github.com/klauspost/compress v1.15.9 // indirect
            github.com/pierrec/lz4/v4 v4.1.15 // indirect
            github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
            golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa // indirect
            golang.org/x/net v0.0.0-20220809184613-07c6da5e1ced // indirect
            golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10 // indirect
            )
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myclient-other
  namespace: otterize-tutorial-kafka-mtls
spec:
  selector:
    matchLabels:
      app: myclient-other
  template:
    metadata:
      labels:
        app: myclient-other
      annotations:
        credentials-operator.otterize.com/tls-secret-name: myclient-other-credentials-secret
    spec:
      containers:
        - name: myclient-other
          image: golang
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do cd /app; cp src/* .; go get main; go run .; sleep infinity; done" ]
          volumeMounts:
            - name: ephemeral
              mountPath: /app
            - mountPath: /app/src
              name: myclient-other-go
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: myclient-other-go
          configMap:
            name: myclient-other-go
        - name: otterize-credentials
          secret:
            secretName: myclient-other-credentials-secret
        - name: ephemeral
          emptyDir: { }