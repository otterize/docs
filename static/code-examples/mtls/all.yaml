apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-mtls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-js
  namespace: otterize-tutorial-mtls
data:
  client.js: |
    const fs = require('fs');
    const https = require('https');
    
    const options = {
        hostname: 'server.otterize-tutorial-mtls',
        port: 443,
        path: '/hello',
        method: 'GET',
        cert: fs.readFileSync('/var/otterize/credentials/cert.pem'),
        key: fs.readFileSync('/var/otterize/credentials/key.pem'),
        ca: fs.readFileSync('/var/otterize/credentials/ca.pem')
    }
    
    const req = https.request(
        options,
        res => {
            res.on('data', function (data) {
                console.log(data.toString())
            });
        }
    );
    
    req.end();
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: otterize-tutorial-mtls
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
      annotations:
        credentials-operator.otterize.com/tls-secret-name: client-credentials-secret
    spec:
      containers:
        - name: client
          image: node:19
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do node /app/client.js; sleep 2; done" ]
          volumeMounts:
            - mountPath: /app/
              name: client-js
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: client-js
          configMap:
            name: client-js
        - name: otterize-credentials
          secret:
            secretName: client-credentials-secret
---
apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-mtls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-js
  namespace: otterize-tutorial-mtls
data:
  server.js: |
    const https = require(`https`);
    const fs = require(`fs`);
    
    const options = {
        key: fs.readFileSync('/var/otterize/credentials/key.pem'),
        cert: fs.readFileSync('/var/otterize/credentials/cert.pem'),
        ca: fs.readFileSync('/var/otterize/credentials/ca.pem'),
        requestCert: true
    };
    
    https.createServer(
        options,
        (req, res) => {
            const peerCert = req.connection.getPeerCertificate();
            const ownCert = req.connection.getCertificate();
            console.log("Received request:");
            console.log(peerCert.subject.CN + ":\t" + req.method + " " + req.url);
            if (req.url === '/hello') {
                res.writeHead(200);
                res.end('mTLS hello world\nfrom: ' + ownCert.subject.CN + '\nto client: ' + peerCert.subject.CN);
            } else {
                res.end();
            }
        }).listen(443);
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
      annotations:
        #        to rename credentials-secret-nam   e
        credentials-operator.otterize.com/tls-secret-name: server-credentials-secret
    spec:
      containers:
        - name: server
          image: node:19
          command: [ "node", "/app/server.js" ]
          volumeMounts:
            - mountPath: /app/
              name: server-js
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: server-js
          configMap:
            name: server-js
        - name: otterize-credentials
          secret:
            secretName: server-credentials-secret
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    app: server
  ports:
    - protocol: TCP
      port: 443
      name: tls
      targetPort: 443