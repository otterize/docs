"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2934,8401],{9365:(e,t,n)=>{n.d(t,{A:()=>i});var a=n(6540),o=n(53);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.A)(l.tabItem,i),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>v});var a=n(8168),o=n(6540),l=n(53),i=n(3104),r=n(6347),s=n(7485),c=n(1682),u=n(9466);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function g(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(l),(0,o.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=g(e),[i,r]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,c]=m({queryString:n,groupId:a}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Dv)(n);return[a,(0,o.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=s??p;return d({value:e,tabValues:l})?e:null})();(0,o.useLayoutEffect)((()=>{h&&r(h)}),[h]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),y(e)}),[c,y,l]),tabValues:l}}var h=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),g=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==r&&(p(t),s(a))},d=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.A)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:g},i,{className:(0,l.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":r===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=y(e);return o.createElement("div",{className:(0,l.A)("tabs-container",b.tabList)},o.createElement(f,(0,a.A)({},e,t)),o.createElement(w,(0,a.A)({},e,t)))}function v(e){const t=(0,h.A)();return o.createElement(N,(0,a.A)({key:String(t)},e))}},1202:(e,t,n)=>{n.d(t,{A:()=>O});var a=n(8168),o=n(6540),l=n(2303),i=n(53),r=n(6058),s=n(7559),c=n(4291);const u={codeBlockContainer:"codeBlockContainer_APcc"};function p(e){let{as:t,...n}=e;const l=(0,r.A)(),p=(0,c.M$)(l);return o.createElement(t,(0,a.A)({},n,{style:p,className:(0,i.A)(n.className,u.codeBlockContainer,s.G.common.codeBlock)}))}const g={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function d(e){let{children:t,className:n}=e;return o.createElement(p,{as:"pre",tabIndex:0,className:(0,i.A)(g.codeBlockStandalone,"thin-scrollbar",n)},o.createElement("code",{className:g.codeBlockLines},t))}var m=n(6342),y=n(6591),h=n(8382);const b={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=n(6025);function w(e){let{line:t,classNames:n,showLineNumbers:l,getLineProps:r,getTokenProps:s}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=r({line:t,className:(0,i.A)(n,l&&b.codeLine)}),u=t.map(((e,t)=>o.createElement("span",(0,a.A)({key:t},s({token:e,key:t})))));return o.createElement("span",c,l?o.createElement(o.Fragment,null,o.createElement("span",{className:b.codeLineNumber}),o.createElement("span",{className:b.codeLineContent},u)):u,o.createElement("br",null))}var N=n(9242),v=n(1312),C=n(1473),S=n(4115);const k={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function P(e){let{code:t,className:n}=e;const[a,l]=(0,o.useState)(!1),r=(0,o.useRef)(void 0),s=(0,o.useCallback)((()=>{(0,N.A)(t),l(!0),r.current=window.setTimeout((()=>{l(!1)}),1e3)}),[t]);return(0,o.useEffect)((()=>()=>window.clearTimeout(r.current)),[]),o.createElement("button",{type:"button","aria-label":a?(0,v.T)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,v.T)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,v.T)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,i.A)("clean-btn",n,k.copyButton,a&&k.copyButtonCopied),onClick:s},o.createElement("span",{className:k.copyButtonIcons,"aria-hidden":"true"},o.createElement(C.A,{className:k.copyButtonIcon}),o.createElement(S.A,{className:k.copyButtonSuccessIcon})))}var A=n(5048);const T={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function L(e){let{className:t,onClick:n,isEnabled:a}=e;const l=(0,v.T)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return o.createElement("button",{type:"button",onClick:n,className:(0,i.A)("clean-btn",t,a&&T.wordWrapButtonEnabled),"aria-label":l,title:l},o.createElement(A.A,{className:T.wordWrapButtonIcon,"aria-hidden":"true"}))}function E(e){let{children:t,className:n="",metastring:l,title:s,showLineNumbers:u,language:d}=e;const{prism:{defaultLanguage:b,magicComments:N}}=(0,m.p)(),v=d??(0,c.Op)(n)??b,C=(0,r.A)(),S=(0,y.f)(),k=(0,c.wt)(l)||s,{lineClassNames:A,code:T}=(0,c.Li)(t,{metastring:l,language:v,magicComments:N}),E=(0,f.A)("/",{absolute:!0}).slice(0,-1),O=T.replaceAll("${ABSOLUTE_URL}",E),z=u??(0,c._u)(l);return o.createElement(p,{as:"div",className:(0,i.A)(n,v&&!n.includes(`language-${v}`)&&`language-${v}`)},k&&o.createElement("div",{className:g.codeBlockTitle},k),o.createElement("div",{className:g.codeBlockContent},o.createElement(h.Ay,(0,a.A)({},h.Gs,{theme:C,code:O,language:v??"text"}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:l}=e;return o.createElement("pre",{tabIndex:0,ref:S.codeBlockRef,className:(0,i.A)(t,g.codeBlock,"thin-scrollbar")},o.createElement("code",{className:(0,i.A)(g.codeBlockLines,z&&g.codeBlockLinesWithNumbering)},n.map(((e,t)=>o.createElement(w,{key:t,line:e,getLineProps:a,getTokenProps:l,classNames:A[t],showLineNumbers:z})))))})),o.createElement("div",{className:g.buttonGroup},(S.isEnabled||S.isCodeScrollable)&&o.createElement(L,{className:g.codeButton,onClick:()=>S.toggle(),isEnabled:S.isEnabled}),o.createElement(P,{className:g.codeButton,code:O}))))}function O(e){let{children:t,...n}=e;const i=(0,l.A)(),r=function(e){return o.Children.toArray(e).some((e=>(0,o.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),s="string"==typeof r?E:d;return o.createElement(s,(0,a.A)({key:String(i)},n),r)}},6286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=n(8168),o=(n(6540),n(5680)),l=(n(1202),n(1470)),i=n(9365);const r={sidebar_position:4,title:"PostgreSQL table-level access mapping",image:"/img/quick-tutorials/postgres/social.png"},s=void 0,c={unversionedId:"features/postgresql/tutorials/postgres-mapping",id:"features/postgresql/tutorials/postgres-mapping",title:"PostgreSQL table-level access mapping",description:"Otterize visualizes table-level access to PostgreSQL databases, by collecting PostgreSQL audit logs and associating them with the client service identities.",source:"@site/docs/features/postgresql/tutorials/postgres-mapping.mdx",sourceDirName:"features/postgresql/tutorials",slug:"/features/postgresql/tutorials/postgres-mapping",permalink:"/features/postgresql/tutorials/postgres-mapping",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/postgresql/tutorials/postgres-mapping.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"PostgreSQL table-level access mapping",image:"/img/quick-tutorials/postgres/social.png"},sidebar:"docSidebar",previous:{title:"Just-in-time PostgreSQL access",permalink:"/features/postgresql/tutorials/postgres"},next:{title:"Reference",permalink:"/features/postgresql/reference"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Prepare a Kubernetes cluster and connect it to Otterize Cloud",id:"prepare-a-kubernetes-cluster-and-connect-it-to-otterize-cloud",level:3},{value:"Create an Otterize Cloud account",id:"create-an-otterize-cloud-account",level:4},{value:"Install Otterize OSS, connected to Otterize Cloud",id:"install-otterize-oss-connected-to-otterize-cloud",level:4},{value:"Prepare a Cloud SQL for PostgreSQL instance",id:"prepare-a-cloud-sql-for-postgresql-instance",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Deploy a PostgreSQL client",id:"deploy-a-postgresql-client",level:3},{value:"Configure the Cloud SQL server to enable database auditing",id:"configure-the-cloud-sql-server-to-enable-database-auditing",level:3},{value:"Route Cloud SQL audit logs to a Pub/Sub destination",id:"route-cloud-sql-audit-logs-to-a-pubsub-destination",level:3},{value:"Apply a PostgreSQLServerConfig in your cluster",id:"apply-a-postgresqlserverconfig-in-your-cluster",level:3},{value:"Create an Otterize database integration and configure visibility log collection",id:"create-an-otterize-database-integration-and-configure-visibility-log-collection",level:3},{value:"Create a ClientIntents resource allowing access from the PostgreSQL client pod to the Cloud SQL server",id:"create-a-clientintents-resource-allowing-access-from-the-postgresql-client-pod-to-the-cloud-sql-server",level:3},{value:"Teardown",id:"teardown",level:2}],g={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,o.yg)(d,(0,a.A)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Otterize visualizes table-level access to PostgreSQL databases, by collecting PostgreSQL audit logs and associating them with the client service identities."),(0,o.yg)("p",null,"In this tutorial, we will:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Optionally, prepare a Kubernetes cluster and connect it to Otterize Cloud"),(0,o.yg)("li",{parentName:"ul"},"Optionally, deploy a Cloud SQL for PostgreSQL instance"),(0,o.yg)("li",{parentName:"ul"},"Deploy a PostgreSQL client pod that queries the Cloud SQL server"),(0,o.yg)("li",{parentName:"ul"},"Configure the Cloud SQL server to enable database auditing and route the audit logs to a Pub/Sub destination"),(0,o.yg)("li",{parentName:"ul"},"Create an Otterize database integration and configure visibility log collection"),(0,o.yg)("li",{parentName:"ul"},"Create a ClientIntents resource allowing access from the PostgreSQL client pod to the Cloud SQL server")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Visibility log collection is currently available only for PostgreSQL instances running on GCP Cloud SQL.")),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("h3",{id:"prepare-a-kubernetes-cluster-and-connect-it-to-otterize-cloud"},"Prepare a Kubernetes cluster and connect it to Otterize Cloud"),(0,o.yg)("p",null,"Already have Otterize deployed with the database integration configured on your cluster? ",(0,o.yg)("a",{parentName:"p",href:"#tutorial"},"Skip to the tutorial.")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Prepare a Kubernetes cluster"),"Below are instructions for setting up a Kubernetes cluster with network policies. If you don't have a cluster already, we recommend starting out with a Minikube cluster.",(0,o.yg)(l.A,{groupId:"cni",mdxType:"Tabs"},(0,o.yg)(i.A,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,o.yg)("p",null,"If you don't have the Minikube CLI, first ",(0,o.yg)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"install it"),". "),(0,o.yg)("p",null,"Then start your Minikube cluster with Calico, in order to enforce network policies."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"minikube start --cpus=4 --memory 4096 --disk-size 32g --cni=calico\n")),(0,o.yg)("p",null,"The increased CPU, memory and disk resource allocations are required to be able to deploy the ecommerce app used in the visual tutorials successfully.")),(0,o.yg)(i.A,{value:"gke",label:"Google GKE",mdxType:"TabItem"},(0,o.yg)("a",{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#gcloud"},"Visit the official documentation"),", or follow the instructions below:",(0,o.yg)(l.A,{mdxType:"Tabs"},(0,o.yg)(i.A,{value:"cli",label:"gcloud CLI",mdxType:"TabItem"},(0,o.yg)("p",null,"To use the gcloud CLI for this tutorial, first ",(0,o.yg)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"install")," and then\n",(0,o.yg)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/initializing"},"initialize")," it."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.yg)("p",null,"Run the following command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters create CLUSTER_NAME --enable-network-policy --zone=ZONE\n")),(0,o.yg)("p",null,"(Replace ",(0,o.yg)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the new cluster and ",(0,o.yg)("inlineCode",{parentName:"p"},"ZONE")," with your zone.)"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster, perform the following tasks:"))),(0,o.yg)("p",null,"Run the following command to enable the add-on:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --update-addons=NetworkPolicy=ENABLED\n")),(0,o.yg)("p",null,"(Replace ",(0,o.yg)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)"),(0,o.yg)("p",null,"Then enable network policy enforcement on your cluster, re-creating your cluster's node pools with network policy enforcement enabled:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --enable-network-policy\n")),(0,o.yg)("p",null,"(Replace ",(0,o.yg)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)")),(0,o.yg)(i.A,{value:"console",label:"Console",mdxType:"TabItem"},(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console.\nThe remaining steps will appear automatically in the Google Cloud console.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"On the Google Kubernetes Engine page, click Create.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Configure your cluster as desired.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"From the navigation pane, under Cluster, click Networking.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Select the checkbox to Enable network policy.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Click Create."))),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster:"))),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console. The remaining steps will appear automatically in the Google Cloud console.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"In the cluster list, click the name of the cluster you want to modify.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Under Networking, in the Network policy field, click Edit network policy.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Select the checkbox to Enable network policy for master and click Save Changes.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Wait for your changes to apply, and then click Edit network policy again.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Select the checkbox to Enable network policy for nodes.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Click Save Changes.")))))),(0,o.yg)(i.A,{value:"eks",label:"AWS EKS",mdxType:"TabItem"},(0,o.yg)("p",null,"Starting August 29, 2023, ",(0,o.yg)("a",{parentName:"p",href:"https://aws.amazon.com/blogs/containers/amazon-vpc-cni-now-supports-kubernetes-network-policies"},"you can configure the built-in VPC CNI add-on to enable network policy support"),".\nTo spin up a new cluster, use the following ",(0,o.yg)("inlineCode",{parentName:"p"},"eksctl")," ",(0,o.yg)("inlineCode",{parentName:"p"},"ClusterConfig"),", and save it to a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"cluster.yaml"),"."),(0,o.yg)("p",null,"Spin up the cluster using ",(0,o.yg)("inlineCode",{parentName:"p"},"eksctl create cluster -f cluster.yaml"),". This will spin up a cluster called ",(0,o.yg)("inlineCode",{parentName:"p"},"network-policy-demo")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"us-west-2"),"."),(0,o.yg)("p",null,"The important bit is the configuration for the VPC CNI addon:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: network-policy-demo\n  version: "1.27"\n  region: us-west-2\n\niam:\n  withOIDC: true\n\nvpc:\n  clusterEndpoints:\n    publicAccess: true\n    privateAccess: true\n\naddons:\n  - name: vpc-cni\n    version: 1.14.0\n    attachPolicyARNs: #optional\n    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \n    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n  - name: coredns\n  - name: kube-proxy\n\nmanagedNodeGroups:\n  - name: x86-al2-on-demand\n    amiFamily: AmazonLinux2\n    instanceTypes: [ "m6i.xlarge", "m6a.xlarge" ]\n    minSize: 0\n    desiredCapacity: 2\n    maxSize: 6\n    privateNetworking: true\n    disableIMDSv1: true\n    volumeSize: 100\n    volumeType: gp3\n    volumeEncrypted: true\n    tags:\n      team: "eks"\n')),(0,o.yg)("p",null,"For guides that deploy the larger set of services, Kafka and ZooKeeper are also deployed, and you will also need the EBS CSI driver to accommodate their storage needs. ",(0,o.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html"},"Follow the AWS guide for the EBS CSI add-on to do so."),"\nIf you're not using the VPC CNI, you can set up the Calico network policy controller using the following instructions:"),(0,o.yg)("a",{href:"https://docs.aws.amazon.com/eks/latest/userguide/calico.html"},"Visit the official documentation"),", or follow the instructions below:",(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Spin up an ",(0,o.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html"},"EKS cluster")," using the console, AWS CLI or ",(0,o.yg)("inlineCode",{parentName:"li"},"eksctl"),"."),(0,o.yg)("li",{parentName:"ol"},"Install Calico for network policy enforcement, without replacing the CNI:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-operator.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-crs.yaml\n"))),(0,o.yg)(i.A,{value:"aks",label:"Azure AKS",mdxType:"TabItem"},(0,o.yg)("p",null,"You can set up an AKS cluster using this ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli"},"guide"),"."),(0,o.yg)("p",null,"For network policy support, no setup is required: Azure AKS comes with a built-in network policy implementation called Azure Network Policy Manager. You can choose whether you'd like to use this option or Calico when you create a cluster."),(0,o.yg)("a",{href:"https://learn.microsoft.com/en-us/azure/aks/use-network-policies"}," Read more at the official documentation site"),"."))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Install Otterize in your cluster, ",(0,o.yg)("b",null,"with")," Otterize Cloud"),(0,o.yg)("h4",{id:"create-an-otterize-cloud-account"},"Create an Otterize Cloud account"),(0,o.yg)("p",null,"  If you don't already have an account, browse to ",(0,o.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"https://app.otterize.com")," to set one up."),(0,o.yg)("p",null,"If someone in your team has already created an org in Otterize Cloud, and invited you (using your email address), you may see an invitation to accept."),(0,o.yg)("p",null,"Otherwise, you'll create a new org, which you can later rename, and invite your teammates to join you there."),(0,o.yg)("h4",{id:"install-otterize-oss-connected-to-otterize-cloud"},"Install Otterize OSS, connected to Otterize Cloud"),(0,o.yg)("p",null,'  If no Kubernetes clusters are connected to your account, click the "Create integration" button and then click the "Add integration" button to:'),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Create a Kubernetes integration, specifying its name and the name of an environment to which all namespaces in that cluster will belong, by default."),(0,o.yg)("li",{parentName:"ol"},"Connect it with your actual Kubernetes cluster, by running the Helm commands shown on the screen after creating the integration.",(0,o.yg)("ol",{parentName:"li"},(0,o.yg)("li",{parentName:"ol"},"Follow the instructions to install Otterize ",(0,o.yg)("b",null,"with enforcement on")," (use the toggle to make ",(0,o.yg)("inlineCode",{parentName:"li"},"Enforcement mode: active"),")")))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"More details, if you're curious"),(0,o.yg)("p",null,"Connecting your cluster simply entails installing Otterize OSS via Helm, using credentials from your account so Otterize OSS can report information needed to visualize the cluster."),(0,o.yg)("p",null,"The credentials will already be inlined into the Helm command shown in the Cloud UI, so you just need to copy that line and run it from your shell.\nIf you don't give it the Cloud credentials, Otterize OSS will run fully standalone in your cluster ","\u2014"," you just won't have the visualization in Otterize Cloud."),(0,o.yg)("p",null,'The Helm command shown in the Cloud UI also includes flags to turn off enforcement: Otterize OSS will be running in "shadow mode," meaning that it will show you what ',(0,o.yg)("strong",{parentName:"p"},"would")," happen if it were to create/update your access controls (Kubernetes network policies, Kafka ACLs, Istio authorization policies, etc.). While that's useful for gradually rolling out IBAC, for this tutorial we go straight to active enforcement."))),(0,o.yg)("h3",{id:"prepare-a-cloud-sql-for-postgresql-instance"},"Prepare a Cloud SQL for PostgreSQL instance"),(0,o.yg)("p",null,"Already have a Cloud SQL for PostgreSQL instance ready? ",(0,o.yg)("a",{parentName:"p",href:"#tutorial"},"Skip to the tutorial.")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Deploy a Cloud SQL for PostgreSQL instance"),(0,o.yg)("p",null,"  Follow the ",(0,o.yg)("a",{parentName:"p",href:"https://cloud.google.com/sql/docs/postgres/create-instance"},"installation instructions on the Google Cloud SQL documentation"),"."),(0,o.yg)("li",null,"On the ",(0,o.yg)("b",null,"Connections")," configuration, make sure you check the ",(0,o.yg)("b",null,"Public IP")," option, to create a public IP address for your Cloud SQL instance."),(0,o.yg)("li",null,"On the ",(0,o.yg)("b",null,"Authorized networks")," configuration, add ",(0,o.yg)("b",null,"0.0.0.0/0")," to allow access from the internet.")),(0,o.yg)("h2",{id:"tutorial"},"Tutorial"),(0,o.yg)("h3",{id:"deploy-a-postgresql-client"},"Deploy a PostgreSQL client"),(0,o.yg)("p",null,"At this step of the tutorial, you will be deploying a dummy postgres client application which will query your\nCloud SQL instance periodically, approximately once a minute.\nThis will generate visibility logs which will be consumed by Otterize Cloud."),(0,o.yg)("p",null,"Run the following commands, replacing ",(0,o.yg)("inlineCode",{parentName:"p"},"<PGHOST>"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"<PGUSER>")," & ",(0,o.yg)("inlineCode",{parentName:"p"},"<PGPASSWORD>")," with the IP address & credentials for your Cloud SQL for PostgreSQL instance:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'export PGHOST="<PGHOST>"\nexport PGUSER="<PGUSER>"\nexport PGPASSWORD="<PGPASSWORD>"\nexport PGPORT="5432"\nexport TUTORIAL_DB="otterize_tutorial"\nexport TUTORIAL_TABLE="users"\n\nkubectl create namespace otterize-tutorial-postgresql-visibility\n\n# Create a database and a table to be used for the dummy application\nkubectl run -i --tty --rm --image andreswebs/postgresql-client --restart=Never -n otterize-tutorial-postgresql-visibility \\\n  --env PGHOST=$PGHOST --env PGPORT=$PGPORT --env PGUSER=$PGUSER --env PGPASSWORD=$PGPASSWORD \\\n  -- psql -c "CREATE DATABASE $TUTORIAL_DB;"\nkubectl run -i --tty --rm --image andreswebs/postgresql-client --restart=Never -n otterize-tutorial-postgresql-visibility \\\n  --env PGHOST=$PGHOST --env PGPORT=$PGPORT --env PGUSER=$PGUSER --env PGPASSWORD=$PGPASSWORD \\\n  -- psql --dbname $TUTORIAL_DB -c "CREATE TABLE IF NOT EXISTS $TUTORIAL_TABLE (id serial PRIMARY KEY); insert into users values (default);"\n\n# deploy the dummy postgres client application\nkubectl create secret generic psql-credentials -n otterize-tutorial-postgresql-visibility \\\n    --from-literal=username="$PGUSER" \\\n    --from-literal=password="$PGPASSWORD"\nkubectl create configmap psql-host -n otterize-tutorial-postgresql-visibility \\\n    --from-literal=pghost="$PGHOST" \\\n    --from-literal=pgport="$PGPORT" \\\n    --from-literal=pgdatabase="$TUTORIAL_DB" \\\n    --from-literal=pgtable="$TUTORIAL_TABLE"\nkubectl apply -f ${ABSOLUTE_URL}/code-examples/postgresql-visibility/psql-client.yaml -n otterize-tutorial-postgresql-visibility\n')),(0,o.yg)("h3",{id:"configure-the-cloud-sql-server-to-enable-database-auditing"},"Configure the Cloud SQL server to enable database auditing"),(0,o.yg)("p",null,"Otterize utilizes PostgreSQL audit logs generated using the ",(0,o.yg)("a",{parentName:"p",href:"https://www.pgaudit.org/"},"pgAudit extension"),"."),(0,o.yg)("p",null,"Follow the ",(0,o.yg)("a",{parentName:"p",href:"https://cloud.google.com/sql/docs/postgres/pg-audit#setting-up-database-auditing"},"instructions on GCP docs")," to configure audit for PostgreSQL using pgAudit on your Cloud SQL instance."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"For the ",(0,o.yg)("b",null,"pgaudit.log")," flag, select the ",(0,o.yg)("b",null,"pgaudit.log=all")," log level."),(0,o.yg)("li",{parentName:"ul"},"After completing the setup, open the ",(0,o.yg)("a",{parentName:"li",href:"https://console.cloud.google.com/logs/query"},"GCP Logs Explorer")," application, and apply the following filter to see audit logs collected from your Cloud SQL instance:",(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'resource.type="cloudsql_database"\nprotoPayload.request.@type="type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry"\nlogName="projects/<GCP_PROJECT_ID>/logs/cloudaudit.googleapis.com%2Fdata_access"\nresource.labels.database_id="<GCP_PROJECT_ID>:<CLOUDSQL_INSTANCE_NAME>"\n')))),(0,o.yg)("p",null,"If your Cloud SQL instance is handling any requests, you should be seeing audit records generated by it periodically."),(0,o.yg)("h3",{id:"route-cloud-sql-audit-logs-to-a-pubsub-destination"},"Route Cloud SQL audit logs to a Pub/Sub destination"),(0,o.yg)("p",null,"Otterize Cloud consumes audit logs collected from your Cloud SQL instancec by subscribing to a pub/sub topic in your GCP project."),(0,o.yg)("p",null,"Follow the instructions for ",(0,o.yg)("a",{parentName:"p",href:"https://cloud.google.com/logging/docs/export/pubsub#integrate-thru-pubsub"},"third-party integrations with Pub/Sub on GCP docs"),"\nto configure a log sink and route your Cloud SQL instance's audit logs through a Pub/Sub topic, and allow Otterize Cloud to subscribe to it."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Under ",(0,o.yg)("b",null,"logs to include"),", provide the following filter to include all audit logs generated by pgAudit\nfor the Cloud SQL instance you are using for this tutorial:",(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'resource.type="cloudsql_database"\nprotoPayload.request.@type="type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry"\nlogName="projects/<GCP_PROJECT_ID>/logs/cloudaudit.googleapis.com%2Fdata_access"\nresource.labels.database_id="<GCP_PROJECT_ID>:<CLOUDSQL_INSTANCE_NAME>"\n'))),(0,o.yg)("li",{parentName:"ul"},"For the ",(0,o.yg)("b",null,"third-party service account name"),", use Otterize Cloud service account:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"otterize-cloud@otterize-cloud.iam.gserviceaccount.com\n")),(0,o.yg)("p",null,"If your Cloud SQL instance is handling any requests,\nyou may now open your ",(0,o.yg)("a",{parentName:"p",href:"https://console.cloud.google.com/cloudpubsub/topic/list"},"Pub/Sub topic's metrics")," page\nand observe how audit log records are being directed to it."),(0,o.yg)("h3",{id:"apply-a-postgresqlserverconfig-in-your-cluster"},"Apply a PostgreSQLServerConfig in your cluster"),(0,o.yg)("p",null,"To enable Otterize operators to access your database, apply a PostgreSQLServerConfig in your cluster:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: PostgreSQLServerConfig\nmetadata:\n  name: otterize-tutorial-cloudsql # database instance name - should match the target in ClientIntents\nspec:\n  address: <PGHOST:PGPORT> # Your CloudSQL database address\n  credentials:\n    # Username Otterize will connect with & configure permissions as; optional, can be omitted if using a secretRef\n    username: <PGUSER>\n    # Password for the above username; optional, can be omitted if using a secretRef\n    password: <PGPASSWORD>\n    # Secret containing the postgres credentials; optional, can be omitted if using the above username & password fields\n    secretRef:\n      # Name of the secret containing the postgres credentials; required\n      name: postgres-credentials\n")),(0,o.yg)("h3",{id:"create-an-otterize-database-integration-and-configure-visibility-log-collection"},"Create an Otterize database integration and configure visibility log collection"),(0,o.yg)("p",null,"To configure Otterize Cloud to subscribe and start consuming your Cloud SQL instance's audit logs,\ncreate an Otterize database integration and configure it with your GCP project and Pub/Sub topic:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Navigate to the ",(0,o.yg)("a",{parentName:"li",href:"https://app.otterize.com/integrations"},"Integrations page")," on Otterize Cloud and click the ",(0,o.yg)("b",null,"+ Add Integration")," button to create a new integration"),(0,o.yg)("li",{parentName:"ul"},"Choose the ",(0,o.yg)("b",null,"Database")," integration type"),(0,o.yg)("li",{parentName:"ul"},"Name your integration ",(0,o.yg)("b",null,"otterize-tutorial-cloudsql")),(0,o.yg)("li",{parentName:"ul"},"Under ",(0,o.yg)("b",null,"Visibility settings"),", choose to collect visibility logs using a ",(0,o.yg)("b",null,"GCP Pub/Sub topic")),(0,o.yg)("li",{parentName:"ul"},"Enter your GCP Project ID & Topic name"),(0,o.yg)("li",{parentName:"ul"},"Click ",(0,o.yg)("b",null,"Test Visibility")," to ensure that Otterize Cloud is able to subscribe to your Pub/Sub topic"),(0,o.yg)("li",{parentName:"ul"},"Click ",(0,o.yg)("b",null,"Add")," to finish setting up your database integration")),(0,o.yg)("p",null,"At this point, Otterize's database integration will start collecting visibility logs from your Pub/Sub topic,\nand view them in the ",(0,o.yg)("a",{parentName:"p",href:"https://app.otterize.com/access-graph"},"Access graph"),"."),(0,o.yg)("p",null,"If you deployed the dummy postgres application used earlier in this tutorial,\nyou should start seeing connections from the psql-client app to your Cloud SQL server after about one minute."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Access Graph with unknown PostgreSQL client",src:n(5023).A,width:"1180",height:"321"})),(0,o.yg)("p",null,"Click on the node titled ",(0,o.yg)("b",null,"postgres")," to view additional information about the discovered traffic from the psql-client app:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Discovered intents for unknown PostgreSQL client",src:n(8666).A,width:"798",height:"421"}),"\n",(0,o.yg)("img",{alt:"Access table for unknown PostgreSQL client",src:n(1659).A,width:"780",height:"383"})),(0,o.yg)("h3",{id:"create-a-clientintents-resource-allowing-access-from-the-postgresql-client-pod-to-the-cloud-sql-server"},"Create a ClientIntents resource allowing access from the PostgreSQL client pod to the Cloud SQL server"),(0,o.yg)("p",null,"At this point, Otterize Cloud is able to monitor and visualize your database access.\nNext, we will configure Otterize OSS to generate just-in-time PostgreSQL client credentials for the client application,\nand apply a permissive ClientIntents resource allowing the client application access to the Cloud SQL instance.\nThis will create private credentials, used by the client application and by it only,\nwhich enables service-level visibility and least privilege access to your Cloud SQL instance."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Delete the secret containing common psql credentials, generated earlier in this tutorial:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl delete secret psql-credentials -n otterize-tutorial-postgresql-visibility\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Annotate the psql-client app with ",(0,o.yg)("inlineCode",{parentName:"li"},"credentials-operator.otterize.com/user-password-secret-name:psql-credentials"),", to\nstart generating just-in-time client credentials for it:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'kubectl patch cronjob psql-client -n otterize-tutorial-postgresql-visibility -p \\\n  \'{"spec": {"jobTemplate": {"spec": {"template": {"metadata": {"annotations": {"credentials-operator.otterize.com/user-password-secret-name": "psql-credentials"}}}}}}}\'\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Apply a ClientIntents resource for the psql client application, allowing all access to the Cloud SQL DB:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f ${ABSOLUTE_URL}/code-examples/postgresql-visibility/psql-client-clientintents.yaml -n otterize-tutorial-postgresql-visibility\n")),(0,o.yg)("p",null,"You should now see the access graph updated with an edge connecting the psql-client app to your Cloud SQL server:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Access Graph with known PostgreSQL client",src:n(7550).A,width:"1107",height:"565"})),(0,o.yg)("p",null,"Click on the node titled ",(0,o.yg)("b",null,"psql-client")," to see Otterize's suggestion about applying least privilege ClientIntents for it, based on\nthe discovered traffic seen from your audit logs:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Discovered intents for unknown PostgreSQL client",src:n(8589).A,width:"791",height:"416"})),(0,o.yg)("h2",{id:"teardown"},"Teardown"),(0,o.yg)("p",null,"To remove the deployed examples:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Delete the database used by the dummy application:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'kubectl run -i --tty --rm --image andreswebs/postgresql-client --restart=Never -n otterize-tutorial-postgresql-visibility \\\n  --env PGHOST=$PGHOST --env PGPORT=$PGPORT --env PGUSER=$PGUSER --env PGPASSWORD=$PGPASSWORD \\\n  -- psql -c "DROP DATABASE $TUTORIAL_DB;"\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Delete the Kubernetes namespace used by this tutorial:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl delete namespace otterize-tutorial-postgresql-visibility\n")))}m.isMDXComponent=!0},8589:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/access-graph-known-node-discovered-intents-044df4bdb757b023c32e2622df24ba5d.png"},7550:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/access-graph-known-node-6184d2a5293f2af8701e1809c9b818ed.png"},1659:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/access-graph-unknown-node-access-table-1a74a1f38f4e9686cb839633cb3c6f94.png"},8666:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/access-graph-unknown-node-discovered-intents-9a107f94b63a48f046c3ed47107414bb.png"},5023:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/access-graph-unknown-node-e22b5eed441fb497e91f6376e8bc6b2e.png"}}]);