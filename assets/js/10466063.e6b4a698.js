"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9805],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||h[u]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(8168),r=(n(6540),n(5680));const o={sidebar_position:1,title:"Intents operator"},i=void 0,s={unversionedId:"reference/intents-operator/README",id:"reference/intents-operator/README",title:"Intents operator",description:"The Otterize intents operator is an open source Kubernetes operator for automatically managing native access policies such as network policies, Kafka ACLs, and AWS IAM roles, etc, based on the declared intents of your services.",source:"@site/docs/reference/intents-operator/README.mdx",sourceDirName:"reference/intents-operator",slug:"/reference/intents-operator/",permalink:"/reference/intents-operator/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/reference/intents-operator/README.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intents operator"},sidebar:"docSidebar",previous:{title:"Linkerd AuthorizationPolicy automation",permalink:"/features/linkerd/tutorials/linkerd-authorization-policies"},next:{title:"Helm chart",permalink:"/reference/intents-operator/helm-chart"}},l={},c=[{value:"Deploying the intents operator",id:"deploying-the-intents-operator",level:2},{value:"Monitoring the intents operator",id:"monitoring-the-intents-operator",level:2},{value:"Controlling access using the intents operator",id:"controlling-access-using-the-intents-operator",level:2},{value:"Pod annotations",id:"pod-annotations",level:2},{value:"Supported enforcement types",id:"supported-enforcement-types",level:2},{value:"Network policies",id:"network-policies",level:3},{value:"Handling external traffic",id:"handling-external-traffic",level:4},{value:"AWS IAM",id:"aws-iam",level:3},{value:"Azure IAM",id:"azure-iam",level:3},{value:"Google Cloud IAM",id:"google-cloud-iam",level:3},{value:"Kafka mTLS &amp; ACLs",id:"kafka-mtls--acls",level:3},{value:"ACL creation and consumer groups",id:"acl-creation-and-consumer-groups",level:4},{value:"PostgreSQL users &amp; access",id:"postgresql-users--access",level:3},{value:"Istio AuthorizationPolicy",id:"istio-authorizationpolicy",level:3},{value:"Handling external traffic",id:"handling-external-traffic-1",level:4}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The Otterize intents operator is an open source Kubernetes operator for automatically managing native access policies such as network policies, Kafka ACLs, and AWS IAM roles, etc, based on the ",(0,r.yg)("a",{parentName:"p",href:"/reference/ClientIntents%20CRD"},"declared intents of your services"),"."),(0,r.yg)("h2",{id:"deploying-the-intents-operator"},"Deploying the intents operator"),(0,r.yg)("p",null,"To deploy the operator, ",(0,r.yg)("a",{parentName:"p",href:"/reference/intents-operator/helm-chart"},"use the Helm chart"),"."),(0,r.yg)("h2",{id:"monitoring-the-intents-operator"},"Monitoring the intents operator"),(0,r.yg)("p",null,"The intents operator pod exposes a Prometheus metrics endpoint on port 2112, on ",(0,r.yg)("inlineCode",{parentName:"p"},"/metrics"),"."),(0,r.yg)("h2",{id:"controlling-access-using-the-intents-operator"},"Controlling access using the intents operator"),(0,r.yg)("p",null,"To learn how to use the intents operator to control access, head over to the ",(0,r.yg)("a",{parentName:"p",href:"/#features--tutorials"},"Features & tutorials")," section on the main page, or have a look on the sidebar."),(0,r.yg)("h2",{id:"pod-annotations"},"Pod annotations"),(0,r.yg)("p",null,"You can override the workload name the intents operator uses when it computes network policies and Kafka ACLs with a pod annotation."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Annotation"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"intents.otterize.com/service-name")),(0,r.yg)("td",{parentName:"tr",align:null},"Used for ",(0,r.yg)("a",{parentName:"td",href:"/reference/workload-identities#kubernetes-service-identity-resolution"},"workload identity resolution"),".")))),(0,r.yg)("h2",{id:"supported-enforcement-types"},"Supported enforcement types"),(0,r.yg)("h3",{id:"network-policies"},"Network policies"),(0,r.yg)("p",null,"The intents operator automatically creates, updates and deletes network policies, and automatically labels client and server pods, to reflect precisely the client-to-server calls declared in client intents files."),(0,r.yg)("p",null,"The intents operator can also be configured to process client intents ",(0,r.yg)("em",{parentName:"p"},"without")," creating and managing network policies, to provide visibility on what would happen once enforcement via network policies is activated. More information can be found in the ",(0,r.yg)("a",{parentName:"p",href:"/reference/shadow-vs-active-enforcement"},"shadow vs active enforcement documentation"),"."),(0,r.yg)("p",null,"In the example above, the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice")," intends to call the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice"),". When the CRD is applied through ",(0,r.yg)("inlineCode",{parentName:"p"},"kubectl apply"),", the intents operator labels the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," pods, and creates a network policy for the ingress of the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," that references these labels and allows calls to the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," from the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice"),"."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/reference/workload-identities"},"workload identities and resolution")," to learn how service names are resolved for pods."),(0,r.yg)("p",null,"The intents operator uses the resolved identity as the workload name, and combines it with the namespace of the pod and hashed to form the value of the label ",(0,r.yg)("inlineCode",{parentName:"p"},"intents.otterize.com/server"),".\nThis label is used as a selector for network policies. Another\nlabel, ",(0,r.yg)("inlineCode",{parentName:"p"},"intents.otterize.com/access-server-<workloadname>-<workloadhash>"),", is applied to client pods which have declared their intent\nto access the server. This label is used as the selector to determine which client pods are allowed to access the server\npod."),(0,r.yg)("p",null,"Learn more: ",(0,r.yg)("a",{parentName:"p",href:"/features/network-mapping-network-policies/reference/Network-Policies-Deep-Dive"},"Network policies deep dive")),(0,r.yg)("h4",{id:"handling-external-traffic"},"Handling external traffic"),(0,r.yg)("p",null,"The intents operator has automatic behavior for allowing external traffic for pods which have indicated that they are supposed to accept external traffic, such as by creating a ",(0,r.yg)("inlineCode",{parentName:"p"},"Service")," of type ",(0,r.yg)("inlineCode",{parentName:"p"},"NodePort")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"LoadBalancer"),", or an ",(0,r.yg)("inlineCode",{parentName:"p"},"Ingress")," resource."),(0,r.yg)("p",null,"As the intents operator creates network policies, and the semantics of network policies dictate that:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"if no network policies apply to a pod, then all traffic is allowed."),(0,r.yg)("li",{parentName:"ol"},"once any network policy applies to a pod, only the traffic explicitly allowed in the policy is allowed")),(0,r.yg)("p",null,"This meant that if you had no network policies on a pod, and created ClientIntents for that pod, then external traffic would be blocked. To make it easy to enable pod-to-pod traffic without affecting expected external traffic, the intents operator automatically detects resources of kind ",(0,r.yg)("inlineCode",{parentName:"p"},"Service")," of type ",(0,r.yg)("inlineCode",{parentName:"p"},"NodePort")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"LoadBalancer"),", or an ",(0,r.yg)("inlineCode",{parentName:"p"},"Ingress")," resource, and if it creates the first network policy to affect those pods, it also creates a network policy that allows external traffic to those pods, as specified by the external ",(0,r.yg)("inlineCode",{parentName:"p"},"Service"),"/",(0,r.yg)("inlineCode",{parentName:"p"},"Ingress")," - for example, it only allows traffic to the specified ports, not all traffic."),(0,r.yg)("p",null,"This behavior can be disabled using the Helm chart's values."),(0,r.yg)("h3",{id:"aws-iam"},"AWS IAM"),(0,r.yg)("p",null,"The intents operator enables automatic management of AWS IAM roles and policies according to the\ndeclared intents. It works together with the ",(0,r.yg)("a",{parentName:"p",href:"/reference/credentials-operator"},"Otterize credentials operator")," to easily enable secure access\nto AWS cloud resources from client pods, all in your Kubernetes cluster."),(0,r.yg)("p",null,"Try the ",(0,r.yg)("a",{parentName:"p",href:"https://docs.otterize.com/quickstart/access-control/aws-iam-eks"},"AWS IAM tutorial")," to learn more."),(0,r.yg)("h3",{id:"azure-iam"},"Azure IAM"),(0,r.yg)("p",null,"The intents operator enables automatic management of Azure managed identities and role assignments according to the\ndeclared intents. It works together with the ",(0,r.yg)("a",{parentName:"p",href:"/reference/credentials-operator"},"Otterize credentials operator")," to easily enable secure access\nto Azure cloud resources from client pods, all in your Kubernetes cluster."),(0,r.yg)("p",null,"Try the ",(0,r.yg)("a",{parentName:"p",href:"https://docs.otterize.com/features/azure-iam/tutorials/azure-iam-aks"},"Azure IAM tutorial")," to learn more."),(0,r.yg)("h3",{id:"google-cloud-iam"},"Google Cloud IAM"),(0,r.yg)("p",null,"The intents operator enables automatic management of Google Cloud service accounts and policies according to the\ndeclared intents. It works together with the ",(0,r.yg)("a",{parentName:"p",href:"/reference/credentials-operator"},"Otterize credentials operator")," to easily enable secure access\nto Azure cloud resources from client pods, all in your Kubernetes cluster."),(0,r.yg)("p",null,"Try the ",(0,r.yg)("a",{parentName:"p",href:"https://docs.otterize.com/features/gcp-iam/tutorials/gcp-iam-gke"},"GCP IAM tutorial")," to learn more."),(0,r.yg)("h3",{id:"kafka-mtls--acls"},"Kafka mTLS & ACLs"),(0,r.yg)("p",null,"The intents operator automatically creates, updates, and deletes ACLs in Kafka clusters running within your Kubernetes cluster according to the declared intents. It does not modify other ACLs. It works together with the ",(0,r.yg)("a",{parentName:"p",href:"/reference/credentials-operator"},"Otterize credentials operator")," to easily enable secure access to Kafka from client pods, all in your Kubernetes cluster."),(0,r.yg)("p",null,"The intents operator can also be configured to process client intents ",(0,r.yg)("em",{parentName:"p"},"without")," creating and managing Kafka ACLs, to provide visibility on what would happen once enforcement via Kafka ACLs is activated. More information can be found in the ",(0,r.yg)("a",{parentName:"p",href:"/reference/shadow-vs-active-enforcement"},"shadow vs active enforcement documentation"),"."),(0,r.yg)("p",null,"The Otterize credentials operator automatically registers client pods with the credentials service ","\u2014"," either a SPIRE server, or the Otterize Cloud-managed credentials service ","\u2014"," and writes the trusted credentials generated by that service into Kubernetes secrets for use by those pods. The intents operator takes ",(0,r.yg)("inlineCode",{parentName:"p"},"ClientIntents")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"type: kafka")," and creates Kafka ACLs that grant the requested access to the cryptographic identities (SVIDs) created by the credentials operator."),(0,r.yg)("h4",{id:"acl-creation-and-consumer-groups"},"ACL creation and consumer groups"),(0,r.yg)("p",null,"A Kafka client may specify a consumer group ID when consuming a topic. When it does so, it requires DESCRIBE and READ access to the consumer group resource.\nTo enable this, the intents operator creates an ACL enabling all consumers to read and describe all consumer groups.\nThe permission check performed by the AclAuthorizer for a consumer group also takes into account whether the consumer has the appropriate access to the topic\nit is attempting to read, so the end result is that the topic ACLs determine actual access."),(0,r.yg)("h3",{id:"postgresql-users--access"},"PostgreSQL users & access"),(0,r.yg)("p",null,"The intents operator automatically creates, and updates credentials in PostgreSQL databases according to the declared intents. It works together with the Otterize credentials operator to easily enable secure access to PostgreSQL from client pods, all in your Kubernetes cluster."),(0,r.yg)("p",null,"Try the ",(0,r.yg)("a",{parentName:"p",href:"/features/postgresql/tutorials/postgres"},"Just-in-time PostgreSQL users & access")," tutorial to learn more."),(0,r.yg)("h3",{id:"istio-authorizationpolicy"},"Istio AuthorizationPolicy"),(0,r.yg)("p",null,"The intents operator automatically creates, updates and deletes Istio authorization policies, automatically looks up service accounts for client pods and labels server pods, to reflect precisely the client-to-server calls declared in client intents files."),(0,r.yg)("p",null,"The intents operator can also be configured to process client intents ",(0,r.yg)("em",{parentName:"p"},"without")," creating and managing Istio authorization policies, to provide visibility on what would happen once enforcement via Istio authorization policy is activated. More information can be found in the ",(0,r.yg)("a",{parentName:"p",href:"/reference/shadow-vs-active-enforcement"},"shadow vs active enforcement documentation"),"."),(0,r.yg)("p",null,"In the example above, the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice")," intends to call the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice"),". When the CRD is applied through ",(0,r.yg)("inlineCode",{parentName:"p"},"kubectl apply"),", the intents operator labels the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," pod, looks up ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice"),"'s service account, and creates an authorization policy for the ingress of the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," that references the service account and allows calls to the ",(0,r.yg)("inlineCode",{parentName:"p"},"shippingservice")," from the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkoutservice"),"."),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/reference/workload-identities"},"workload identities and resolution")," to learn how workload identity is resolved for pods."),(0,r.yg)("p",null,"The intents operator uses the resolved identity as the workload identity, and combines it with the namespace of the pod and hashed to form the value of the label ",(0,r.yg)("inlineCode",{parentName:"p"},"intents.otterize.com/server"),".\nThis label is used as a selector for servers in Istio authorization policies. The same algorithm is used to look up the client from the workload name in the client intents, for whom the service account is looked up."),(0,r.yg)("p",null,"Finally, an Istio authorization policy is created that allows communication between the client's service account and the server. If the service account covers clients other than the one requested, an event is generated on the ClientIntents to warn about this, and this appears as a warning on Otterize Cloud."),(0,r.yg)("h4",{id:"handling-external-traffic-1"},"Handling external traffic"),(0,r.yg)("p",null,"Coming soon: automated handling of external traffic based on the presence of an ",(0,r.yg)("inlineCode",{parentName:"p"},"Ingress"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Service")," of type ",(0,r.yg)("inlineCode",{parentName:"p"},"LoadBalancer"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"IstioGateway")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"Gateway")," API, like ",(0,r.yg)("a",{parentName:"p",href:"#handling-external-traffic"},"in network policies"),"."),(0,r.yg)("p",null,"When an Istio authorization policy is created for a server, it will only allow incoming traffic that matches the policy."),(0,r.yg)("p",null,"To allow external traffic from outside the cluster to a server, create an ",(0,r.yg)("inlineCode",{parentName:"p"},"AuthorizationPolicy")," that allows all traffic, traffic that does not come from within the cluster by IP range, or traffic from ingress pods. Create this AuthorizationPolicy alongside the ",(0,r.yg)("inlineCode",{parentName:"p"},"Ingress"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Service")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"Gateway")," resource, such as in the same Helm chart."))}h.isMDXComponent=!0}}]);