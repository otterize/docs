"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,u=d["".concat(o,".").concat(f)]||d[f]||m[f]||r;return n?i.createElement(u,l(l({ref:t},c),{},{components:n})):i.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=f;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5706:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4,title:"Intents and intents files"},l=void 0,s={unversionedId:"reference/intents-and-intents-files/README",id:"reference/intents-and-intents-files/README",title:"Intents and intents files",description:"Intent-based access control is, not surprisingly, centered around declaring intents &mdash; specifically, declaring client intents",source:"@site/docs/reference/intents-and-intents-files/README.mdx",sourceDirName:"reference/intents-and-intents-files",slug:"/reference/intents-and-intents-files/",permalink:"/reference/intents-and-intents-files/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/reference/intents-and-intents-files/README.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Intents and intents files"},sidebar:"docSidebar",previous:{title:"API",permalink:"/reference/api/"},next:{title:"Service identities and resolution",permalink:"/reference/service-identities/"}},o={},p=[{value:"Intents within intents files",id:"intents-within-intents-files",level:2},{value:"Intents file formats",id:"intents-file-formats",level:2},{value:"Intents file specification",id:"intents-file-specification",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Intent-based access control is, not surprisingly, centered around declaring intents ","\u2014"," specifically, declaring ",(0,a.kt)("strong",{parentName:"p"},"client")," intents\nto call servers."),(0,a.kt)("p",null,"The mechanism to declare client intents is with ",(0,a.kt)("strong",{parentName:"p"},"client intents files"),', or just "intents files" for short.\nThis is a natural approach for agile, cloud-native organizations and initiatives:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Intents files are ",(0,a.kt)("strong",{parentName:"li"},"declarative"),";"),(0,a.kt)("li",{parentName:"ul"},"Specifically, intents files declare ",(0,a.kt)("strong",{parentName:"li"},"what")," needs to happen (service A needs to access service B to do operation C)\nwithout specifying, or needing to know, ",(0,a.kt)("strong",{parentName:"li"},"how")," to accomplish this;"),(0,a.kt)("li",{parentName:"ul"},"Intents files align with ",(0,a.kt)("strong",{parentName:"li"},"rapid, distributed development")," because they only require the knowledge that\nclient developers already have &mdash no need for the target server developers or admins to keep track of who needs to access them;"),(0,a.kt)("li",{parentName:"ul"},"The declarative approach thrives in ",(0,a.kt)("strong",{parentName:"li"},"cloud-native infrastructures")," where there are existing APIs to configure access control automatically.")),(0,a.kt)("h2",{id:"intents-within-intents-files"},"Intents within intents files"),(0,a.kt)("p",null,"An intent is a declaration by a specific client to call a specific server, optionally specifying more granular\ninformation about the call (e.g. the resource path and method for HTTP, the topic name and operation for Kafka).\nIn other words, an intent is a tuple of client, server, and optional granular call information.\nIf any of those changes, that's logically a different intent, though the intents file format allows some\nshorthand ways of aggregating intents that only differ by HTTP method or Kafka operation. See the example below."),(0,a.kt)("p",null," An client's intents file specifies ",(0,a.kt)("em",{parentName:"p"},"all")," the intents of that client, in one YAML file. Why is that important?\nBecause as the client's needs change, the intents file should change with it, and any intents no longer needed\nshould be removed from the file. When this updated file is applied, the corresponding access is also removed,\ni.e. the network policies or the Kafka ACLs that were previously in place due to those intents are now gone.\nIn this way, access controls always reflect all of, and only, the latest intended access."),(0,a.kt)("h2",{id:"intents-file-formats"},"Intents file formats"),(0,a.kt)("p",null,"Client intents files are independent of the infrastructure on which IBAC is deployed ","\u2014"," indeed, they abstract away\nany tie-ins with infrastructures and implementations of access control."),(0,a.kt)("p",null,"As an example, let's look at the core of a client intents file for a service called ",(0,a.kt)("inlineCode",{parentName:"p"},"checkoutservice"),".\nIt declares that it will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"emailservice"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"orderservice"),", and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ecomm-events")," Kafka service.\nIt also provides more granular information for some of the calls:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"service:\n  name: checkoutservice\ncalls:\n  - name: emailservice\n    type: http\n  - name: orderservice\n    type: http\n    httpResources:\n      - path: /orders/*\n        methods: [ get, post ]\n  - name: ecomm-events\n    type: kafka\n    kafkaTopics:\n      - name: orders\n        operations: [ produce ]\n\n")),(0,a.kt)("p",null,'You can actually create and use such "plain" or "vanilla" intents files without any other metadata. Currently, Otterize only supports processing client intents via the Otterize OSS intents operator for Kubernetes, so you\'ll need to run the plain intents files through the Otterize CLI (',(0,a.kt)("inlineCode",{parentName:"p"},"otterize intents convert"),")  to convert them into Kubernetes custom resource YAML files."),(0,a.kt)("p",null,"Within the context of a Kubernetes cluster, it's very natural to format intents files from the beginning as\nKubernetes custom resources. These files are applied (",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl apply"),") to the Kubernetes API, which validates\nthem against a ",(0,a.kt)("inlineCode",{parentName:"p"},"ClientIntents"),' custom resource definition (CRD) and then hands them over to the Otterize intents\noperator, as expected of a Kubernetes ecosystem extension.\nThe two formats are trivially related: the "plain" intents file contents are simply embedded in the ',(0,a.kt)("inlineCode",{parentName:"p"},"spec"),"\nsection of the custom resource format."),(0,a.kt)("p",null,"Here is the same client intents file, now formatted as a Kubernetes custom resource YAML,\nso it can be applied directly via ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl apply"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: ClientIntents\nmetadata:\n  name: checkoutservice\nspec:\n  // highlight-start\n  service:\n    name: checkoutservice\n  calls:\n    - name: emailservice\n      type: http\n    - name: orderservice\n      type: http\n      httpResources:\n        - path: /orders/*\n          methods: [ get, post ]\n    - name: ecomm-events\n      type: kafka\n      kafkaTopics:\n        - name: orders\n          operations: [ produce ]\n  // highlight-end\n")),(0,a.kt)("h2",{id:"intents-file-specification"},"Intents file specification"),(0,a.kt)("p",null,"The core of a client intents file has 2 root-level fields (keys, in YAML):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"service")," (required): describes the client service that intends to make the calls in this file."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (required): specifies the name of the client service."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"calls")," (required): describes the (server) services which the client intends to call. ",(0,a.kt)("br",null),"\nIts value is a list of key-value pairs, each describing a server service to be called. (The combination of client service, server service, and optionally any more granular information about the call forms an intent.) ",(0,a.kt)("br",null),"\nEach item in the list has the following fields:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"name")," (required): specifies the name of the server service.  ",(0,a.kt)("br",null),'\nThe name can include the namespace of the server service, if different from the client service, separated by a dot ("."): ',(0,a.kt)("inlineCode",{parentName:"p"},"server-name.server-namespace"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"type")," (optional, case-insensitive): specifies the type of call to be made to the server. ",(0,a.kt)("br",null),"\nIf present, the values can currently be ",(0,a.kt)("inlineCode",{parentName:"p"},"http")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"kafka"),".  ",(0,a.kt)("br",null),"\nThe Otterize intents operator will manage network policies for all intents, regardless of type (including if no type is specified); it will ",(0,a.kt)("em",{parentName:"p"},"also")," manage Kafka ACLs if the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"kafka"),"; and in the future it will ",(0,a.kt)("em",{parentName:"p"},"also")," manage HTTP access controls if the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"http"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"topics")," (optional; only allowed if ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"kafka"),"): Specifies the list of Kafka topics to be called. ",(0,a.kt)("br",null),"\nEach item in the list has the following fields:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (required): specifies the name of the topic."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"operations")," (required): specifies the list of intended operations on that topic. ",(0,a.kt)("br",null),"\nAllowed values are: ",(0,a.kt)("inlineCode",{parentName:"li"},"consume"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"produce"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"alter"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"delete"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"describe"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"cluster_action"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"describe_configs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"alter_configs"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"idempotent_write"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"all"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"resources")," (optional; only allowed if ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"http"),"): Specifies the list of HTTP resources to be called. ",(0,a.kt)("br",null),"\nEach item in the list has the following fields:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path")," (required): specifies the HTTP path of the resource."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"methods")," (required): specifies the list of intended operations on that topic. ",(0,a.kt)("br",null),"\nAllowed values are: ",(0,a.kt)("inlineCode",{parentName:"li"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"put"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"patch"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"delete"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"options"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"trace"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"connect"),".")))))))}m.isMDXComponent=!0}}]);