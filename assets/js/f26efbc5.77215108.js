"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4940,8401],{9365:(e,t,n)=>{n.d(t,{A:()=>l});var o=n(6540),a=n(53);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,l),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>k});var o=n(8168),a=n(6540),r=n(53),l=n(3104),i=n(6347),s=n(7485),c=n(1682),d=n(9466);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function g(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=u(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[s,c]=m({queryString:n,groupId:o}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,d.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),y=(()=>{const e=s??p;return g({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),h(e)}),[c,h,r]),tabValues:r}}var y=n(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.a_)(),u=e=>{const t=e.currentTarget,n=d.indexOf(t),o=c[n].value;o!==i&&(p(t),s(o))},g=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,o.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:g,onClick:u},l,{className:(0,r.A)("tabs__item",v.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function b(e){const t=h(e);return a.createElement("div",{className:(0,r.A)("tabs-container",v.tabList)},a.createElement(f,(0,o.A)({},e,t)),a.createElement(w,(0,o.A)({},e,t)))}function k(e){const t=(0,y.A)();return a.createElement(b,(0,o.A)({key:String(t)},e))}},1202:(e,t,n)=>{n.d(t,{A:()=>L});var o=n(8168),a=n(6540),r=n(2303),l=n(53),i=n(6058),s=n(7559),c=n(4291);const d={codeBlockContainer:"codeBlockContainer_APcc"};function p(e){let{as:t,...n}=e;const r=(0,i.A)(),p=(0,c.M$)(r);return a.createElement(t,(0,o.A)({},n,{style:p,className:(0,l.A)(n.className,d.codeBlockContainer,s.G.common.codeBlock)}))}const u={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function g(e){let{children:t,className:n}=e;return a.createElement(p,{as:"pre",tabIndex:0,className:(0,l.A)(u.codeBlockStandalone,"thin-scrollbar",n)},a.createElement("code",{className:u.codeBlockLines},t))}var m=n(6342),h=n(6591),y=n(8382);const v={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=n(6025);function w(e){let{line:t,classNames:n,showLineNumbers:r,getLineProps:i,getTokenProps:s}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=i({line:t,className:(0,l.A)(n,r&&v.codeLine)}),d=t.map(((e,t)=>a.createElement("span",(0,o.A)({key:t},s({token:e,key:t})))));return a.createElement("span",c,r?a.createElement(a.Fragment,null,a.createElement("span",{className:v.codeLineNumber}),a.createElement("span",{className:v.codeLineContent},d)):d,a.createElement("br",null))}var b=n(9242),k=n(1312),N=n(1473),C=n(4115);const A={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function T(e){let{code:t,className:n}=e;const[o,r]=(0,a.useState)(!1),i=(0,a.useRef)(void 0),s=(0,a.useCallback)((()=>{(0,b.A)(t),r(!0),i.current=window.setTimeout((()=>{r(!1)}),1e3)}),[t]);return(0,a.useEffect)((()=>()=>window.clearTimeout(i.current)),[]),a.createElement("button",{type:"button","aria-label":o?(0,k.T)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,k.T)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,k.T)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,l.A)("clean-btn",n,A.copyButton,o&&A.copyButtonCopied),onClick:s},a.createElement("span",{className:A.copyButtonIcons,"aria-hidden":"true"},a.createElement(N.A,{className:A.copyButtonIcon}),a.createElement(C.A,{className:A.copyButtonSuccessIcon})))}var E=n(5048);const I={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function B(e){let{className:t,onClick:n,isEnabled:o}=e;const r=(0,k.T)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return a.createElement("button",{type:"button",onClick:n,className:(0,l.A)("clean-btn",t,o&&I.wordWrapButtonEnabled),"aria-label":r,title:r},a.createElement(E.A,{className:I.wordWrapButtonIcon,"aria-hidden":"true"}))}function z(e){let{children:t,className:n="",metastring:r,title:s,showLineNumbers:d,language:g}=e;const{prism:{defaultLanguage:v,magicComments:b}}=(0,m.p)(),k=g??(0,c.Op)(n)??v,N=(0,i.A)(),C=(0,h.f)(),A=(0,c.wt)(r)||s,{lineClassNames:E,code:I}=(0,c.Li)(t,{metastring:r,language:k,magicComments:b}),z=(0,f.A)("/",{absolute:!0}).slice(0,-1),L=I.replaceAll("${ABSOLUTE_URL}",z),S=d??(0,c._u)(r);return a.createElement(p,{as:"div",className:(0,l.A)(n,k&&!n.includes(`language-${k}`)&&`language-${k}`)},A&&a.createElement("div",{className:u.codeBlockTitle},A),a.createElement("div",{className:u.codeBlockContent},a.createElement(y.Ay,(0,o.A)({},y.Gs,{theme:N,code:L,language:k??"text"}),(e=>{let{className:t,tokens:n,getLineProps:o,getTokenProps:r}=e;return a.createElement("pre",{tabIndex:0,ref:C.codeBlockRef,className:(0,l.A)(t,u.codeBlock,"thin-scrollbar")},a.createElement("code",{className:(0,l.A)(u.codeBlockLines,S&&u.codeBlockLinesWithNumbering)},n.map(((e,t)=>a.createElement(w,{key:t,line:e,getLineProps:o,getTokenProps:r,classNames:E[t],showLineNumbers:S})))))})),a.createElement("div",{className:u.buttonGroup},(C.isEnabled||C.isCodeScrollable)&&a.createElement(B,{className:u.codeButton,onClick:()=>C.toggle(),isEnabled:C.isEnabled}),a.createElement(T,{className:u.codeButton,code:L}))))}function L(e){let{children:t,...n}=e;const l=(0,r.A)(),i=function(e){return a.Children.toArray(e).some((e=>(0,a.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),s="string"==typeof i?z:g;return a.createElement(s,(0,o.A)({key:String(l)},n),i)}},324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var o=n(8168),a=(n(6540),n(5680)),r=(n(1202),n(1470)),l=n(9365);const i={sidebar_position:1,title:"Protecting a service with network policies"},s=void 0,c={unversionedId:"features/network-mapping-network-policies/tutorials/protect-1-service-network-policies",id:"features/network-mapping-network-policies/tutorials/protect-1-service-network-policies",title:"Protecting a service with network policies",description:"Otterize enables intent-based access control (IBAC).",source:"@site/docs/features/network-mapping-network-policies/tutorials/protect-1-service-network-policies.mdx",sourceDirName:"features/network-mapping-network-policies/tutorials",slug:"/features/network-mapping-network-policies/tutorials/protect-1-service-network-policies",permalink:"/features/network-mapping-network-policies/tutorials/protect-1-service-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/network-mapping-network-policies/tutorials/protect-1-service-network-policies.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Protecting a service with network policies"},sidebar:"docSidebar",previous:{title:"NetworkPolicy Automation",permalink:"/features/network-mapping-network-policies/tutorials/k8s-network-policies"},next:{title:"AWS EKS network policies with the VPC CNI",permalink:"/features/network-mapping-network-policies/tutorials/aws-eks-cni-mini"}},d={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Otterize on your cluster",id:"install-otterize-on-your-cluster",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Deploy the demo set of services",id:"deploy-the-demo-set-of-services",level:3},{value:"Seeing the access graph",id:"seeing-the-access-graph",level:3},{value:"Choose one service to protect",id:"choose-one-service-to-protect",level:3},{value:"Declare client intents",id:"declare-client-intents",level:3},{value:"Protect the <code>productcatalogservice</code>",id:"protect-the-productcatalogservice",level:3},{value:"Ready for production",id:"ready-for-production",level:3},{value:"Will load balancers, ingress, and other external traffic be affected?",id:"will-load-balancers-ingress-and-other-external-traffic-be-affected",level:4},{value:"Will admission webhook controllers, e.g. policy validators like Kyverno, be affected?",id:"will-admission-webhook-controllers-eg-policy-validators-like-kyverno-be-affected",level:4},{value:"Working with Otterize in CI/CD",id:"working-with-otterize-in-cicd",level:4},{value:"In summary",id:"in-summary",level:3},{value:"Teardown",id:"teardown",level:2}],u={toc:p},g="wrapper";function m(e){let{components:t,...i}=e;return(0,a.yg)(g,(0,o.A)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Otterize enables intent-based access control (IBAC).\nIn this guide, we'll roll out IBAC gradually, protecting just one service, and taking it all the way to production. We'll show how this can be done quickly, safely, and reproducibly:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Choose one service to protect"),'. Until you ensure its intended clients will have access, you\'ll run in "shadow mode": no network policies will actually be created against this server.'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Declare all its clients' intents")," to call it ","\u2014"," which may be done automatically using the network mapper. See that it would now allow those clients if protection (using network policies) were turned on."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Turn on protection")," for this one service: it is now secure against unintended access."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Take it to production")," by understanding how this would also not break other production-relevant access such as ingress and policy management (e.g. Kyverno), and by putting this into your CI/CD process.")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The goal is to show you how to realize zero trust, in production, in a matter of hours or days, even if it's just for one or a few services at first. It is that easy.")),(0,a.yg)("p",null,"This guide uses the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/GoogleCloudPlatform/microservices-demo"},"Google microservices demo"),"\n(a simple e-commerce application), deployed to a Kubernetes cluster, for illustration."),(0,a.yg)("p",null,"Note: all the capabilities of IBAC are within Otterize OSS, while the access graph in Otterize Cloud will guide us visually at each step."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("h3",{id:"install-otterize-on-your-cluster"},"Install Otterize on your cluster"),(0,a.yg)("p",null,"If you do not have a cluster, we will need to prepare one with ",(0,a.yg)("a",{parentName:"p",href:"/overview/installation#create-a-cluster-with-support-for-network-policies"},"network policy support")),(0,a.yg)("p",null,"To deploy Otterize, head over to ",(0,a.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"Otterize Cloud")," and create a Kubernetes cluster on the ",(0,a.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),", and follow the instructions."),(0,a.yg)("p",null,"We will also need the ",(0,a.yg)("a",{parentName:"p",href:"/overview/installation#install-the-otterize-cli"},"Otterize CLI"),"."),(0,a.yg)("h2",{id:"tutorial"},"Tutorial"),(0,a.yg)("h3",{id:"deploy-the-demo-set-of-services"},"Deploy the demo set of services"),(0,a.yg)("p",null,"To deploy these into your cluster:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace otterize-ecom-demo\nkubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/ecom-demo.yaml\n")),(0,a.yg)("details",null,(0,a.yg)("summary",null,(0,a.yg)("em",null,"Optional: check that the demo was deployed.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"To see all the pods in the demo:\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-ecom-demo\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"The pods should all be ready and running:\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"    NAME                                     READY   STATUS    RESTARTS      AGE\n    adservice-65494cbb9d-5lrv6               1/1     Running   0             115s\n    cartservice-6d84fc45bb-hdtwn             1/1     Running   0             115s\n    checkoutservice-5599486df-dvj9n          1/1     Running   3 (79s ago)   115s\n    currencyservice-6d64686d74-lxb7x         1/1     Running   0             115s\n    emailservice-7c6cbfbbd7-xjxlt            1/1     Running   0             115s\n    frontend-f9448d7d4-6dmnr                 1/1     Running   0             115s\n    kafka-0                                  1/1     Running   2 (83s ago)   115s\n    loadgenerator-7f6987f59-bchgm            1/1     Running   0             114s\n    orderservice-7ffdbf6df-wzzfd             1/1     Running   0             115s\n    otterize-ecom-demo-zookeeper-0           1/1     Running   0             115s\n    paymentservice-86855d78db-zjjfn          1/1     Running   0             115s\n    productcatalogservice-5944c7f666-2rjc6   1/1     Running   0             115s\n    recommendationservice-6c8d848498-zm2rm   1/1     Running   0             114s\n    redis-cart-6b79c5b497-xpms2              1/1     Running   0             115s\n    shippingservice-85694cb9bd-v54xp         1/1     Running   0             114s\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"You can now browse the web app of this demo, if you wish:\n")),(0,a.yg)(r.A,{groupId:"frontend-addr",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"k8s",label:"K8s",mdxType:"TabItem"},(0,a.yg)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get service -n otterize-ecom-demo frontend-external | awk '{print $4}'\n")),(0,a.yg)("p",null,"The result should be similar to (if running on AWS EKS):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"a11843075fd254f8099a986467098647-1889474685.us-east-1.elb.amazonaws.com\n")),(0,a.yg)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.\n(The URL might take some time to populate across DNS servers. Note that we are accessing an HTTP and not an HTTPS website.)')),(0,a.yg)(l.A,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,a.yg)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"kubectl port-forward -n otterize-ecom-demo service/frontend-external 8080:80 &\n")),(0,a.yg)("p",null,"The demo is now accessible at:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"http://localhost:8080\n")),(0,a.yg)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.')))),(0,a.yg)("h3",{id:"seeing-the-access-graph"},"Seeing the access graph"),(0,a.yg)("p",null,"In the Otterize Cloud UI, your ",(0,a.yg)("a",{parentName:"p",href:"https://app.otterize.com/access-graph"},"access graph")," should show 3 green statuses indicating that Otterize OSS operators ","\u2014"," the network mapper, intents operator, and credentials operator ","\u2014"," as connected."),(0,a.yg)("img",{src:"/img/guides/protect-1-service-network-policies/otterize-oss-connected.png",alt:"Access graph - Otterize OSS connected",width:"600"}),(0,a.yg)("p",null,"Below you should see the following map for the demo running in your cluster:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Access graph - network map",src:n(8710).A,width:"1694",height:"760"})),(0,a.yg)("p",null,"The graph shows services (nodes) connected by arrows (edges) indicating that one service (acting as a client) called another service (acting as a server). The arrows may be due to calls discovered by the network mapper, or to declared client intents YAMLs, or both."),(0,a.yg)("p",null,"In fact the graph shows a lot of interesting insights, such as:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"For each ",(0,a.yg)("strong",{parentName:"li"},"service")," you can see its namespace and environment. You can also see its state as a server and as a client, if applicable.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"As a ",(0,a.yg)("strong",{parentName:"li"},"server"),", you'll see whether it's ",(0,a.yg)("strong",{parentName:"li"},"protected")," against unauthorized access:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#F3AF3D",fontWeight:"bold"}},"unprotected"),";"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#238C32",fontWeight:"bold"}},"protected"),"."))),(0,a.yg)("li",{parentName:"ul"},"As a ",(0,a.yg)("strong",{parentName:"li"},"client"),", you'll see whether it's ",(0,a.yg)("strong",{parentName:"li"},"allowed")," to call its servers:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#F3AF3D",fontWeight:"bold"}},"would be blocked")," from making some of its calls if the corresponding servers were protected;"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#238C32",fontWeight:"bold"}},"allowed")," to make all its calls even when all its servers are protected; or"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#E9615C",fontWeight:"bold"}},"blocked")," now from making some of its calls."))))),(0,a.yg)("li",{parentName:"ul"},"An ",(0,a.yg)("strong",{parentName:"li"},"arrow")," (","\u2192",") indicates an intent by a client to call a server. It's derived from any ",(0,a.yg)("strong",{parentName:"li"},"discovered intent")," ","\u2014"," a call discovered by the network mapper ","\u2014"," and any explicitly ",(0,a.yg)("strong",{parentName:"li"},"declared intent")," that the client declared in its ",(0,a.yg)("inlineCode",{parentName:"li"},"ClientIntents")," YAML.",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Its color indicates the blocking status of calls from that client to that server:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#F3AF3D",fontWeight:"bold"}},"would be blocked")," if the server were protected;"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#238C32",fontWeight:"bold"}},"allowed")," even when the server is protected; or"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"#E9615C",fontWeight:"bold"}},"blocked")," right now."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("span",{style:{color:"rgb(72, 101, 129)",fontWeight:"bold"}},"N/A")," when no server is being called.")))))),(0,a.yg)("p",null,"For our demo, the servers statuses are all ",(0,a.yg)("span",{style:{color:"#F3AF3D",fontWeight:"bold"}},"yellow")," because the servers aren't (yet) protected, and because we haven't declared any intents so calls would be blocked if the servers were protected."),(0,a.yg)("h3",{id:"choose-one-service-to-protect"},"Choose one service to protect"),(0,a.yg)("p",null,"Now let's prepare to protect just one service, but remain in shadow mode: no actual network policies, yet. We'll verify no intended access would be blocked before turning on the network policy protection."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Which service should you protect? That's up to you: maybe you have a particularly sensitive one that's higher priority; maybe you'd rather start with a less important one, until you feel confident."),(0,a.yg)("p",{parentName:"admonition"},"In our case, we'll choose the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice"),".")),(0,a.yg)("p",null,"Zoom the access graph a bit to enlarge it around the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice"),":"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Zoom to see productcatalogservice",src:n(1989).A,width:"1018",height:"692"})),(0,a.yg)("p",null,"Click on the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," to show more details about it:"),(0,a.yg)("img",{src:"/img/guides/protect-1-service-network-policies/productcatalogservice-no-intents.png",alt:"Clicked on productcatalogservice"}),(0,a.yg)("p",null,"We can see that:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"As a server, it's currently ",(0,a.yg)("strong",{parentName:"li"},"unprotected")," (specifically, by network policies); that's expected, as we haven't yet turned on protection."),(0,a.yg)("li",{parentName:"ul"},"It ",(0,a.yg)("strong",{parentName:"li"},"would block its clients if it were protected")," (because there would be no network policies allowing their access)."),(0,a.yg)("li",{parentName:"ul"},"To authorize its clients' access, we're told to ",(0,a.yg)("strong",{parentName:"li"},"declare their intents")," (which would generate those network policies ","\u2014"," this is what IBAC means, after all).")),(0,a.yg)("p",null,"Go ahead and close the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," details. It's time to declare its clients' intents."),(0,a.yg)("h3",{id:"declare-client-intents"},"Declare client intents"),(0,a.yg)("p",null,"The graph visually tells us we'll need to declare all 3 of those clients' intents:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("inlineCode",{parentName:"li"},"frontend")," ","\u2192"," ",(0,a.yg)("inlineCode",{parentName:"li"},"productcatalogservice"),"."),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("inlineCode",{parentName:"li"},"recommendationservice")," ","\u2192"," ",(0,a.yg)("inlineCode",{parentName:"li"},"productcatalogservice"),"."),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("inlineCode",{parentName:"li"},"checkoutservice")," ","\u2192"," ",(0,a.yg)("inlineCode",{parentName:"li"},"productcatalogservice"),".")),(0,a.yg)("p",null,"But you don't actually have to look at the graph, nor know in advance the way the demo app is supposed to work. You can auto-generate the intents."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"It's likely you'll want the client devs who own the ",(0,a.yg)("inlineCode",{parentName:"p"},"frontend"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"recommendationservice"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"checkoutservice")," to eventually own those intent declarations, evolve them with their client code as their clients' needs change, review and approve them when they do, etc. They can then serve themselves, and make sure they can access the servers they need, while those servers remain protected."),(0,a.yg)("p",{parentName:"admonition"},"But if you're just getting started with IBAC, and want to first see it in production before getting client devs involved, you can just auto-generate the needed client intents. In fact, you don't need to know in advance which clients call the server: the network mapper will tell you all you need. Just make sure there is representative traffic (load) in your cluster so that the network mapper will see all the expected call patterns.")),(0,a.yg)("p",null,"Let's ask the network mapper to export all the client intents it discovered for the clients of ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"otterize network-mapper export --server productcatalogservice.otterize-ecom-demo\n")),(0,a.yg)("p",null,"Here's the output:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v2beta1\nkind: ClientIntents\nmetadata:\n  name: checkoutservice\n  namespace: otterize-ecom-demo\nspec:\n  workload:\n    name: checkoutservice\n    kind: Deployment\n  targets:\n    - service:\n        name: cartservice\n    - service:\n        name: currencyservice\n    - service:\n        name: emailservice\n    - service:\n        name: kafka\n    - service:\n        name: paymentservice\n    - service:\n        name: productcatalogservice\n    - service:\n        name: shippingservice\n---\napiVersion: k8s.otterize.com/v2beta1\nkind: ClientIntents\nmetadata:\n  name: frontend\n  namespace: otterize-ecom-demo\nspec:\n  workload:\n    name: frontend\n    kind: Deployment\n  targets:\n    - service:\n        name: adservice\n    - service:\n        name: cartservice\n    - service:\n        name: checkoutservice\n    - service:\n        name: currencyservice\n    - service:\n        name: productcatalogservice\n    - service:\n        name: recommendationservice\n    - service:\n        name: shippingservice\n---\napiVersion: k8s.otterize.com/v2beta1\nkind: ClientIntents\nmetadata:\n  name: recommendationservice\n  namespace: otterize-ecom-demo\nspec:\n  workload:\n    name: recommendationservice\n  targets:\n    - service:\n        name: productcatalogservice\n")),(0,a.yg)("p",null,"These are indeed the 3 clients of the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice"),"."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The network mapper detected that these clients will call many servers besides the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice"),", as you would expect by looking at the access graph."),(0,a.yg)("p",{parentName:"admonition"},"Even though we're only looking to protect the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," now, it's ",(0,a.yg)("strong",{parentName:"p"},"best to declare all of those calls")," from those 3 clients: those intents reflect  the actual intent of the code, declaring them won't interfere with anything, and it will get us ready to protect those other servers too, in the future.")),(0,a.yg)("p",null,"Let's apply these client intents:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"otterize network-mapper export --server productcatalogservice.otterize-ecom-demo \\\n| kubectl apply -f -\n")),(0,a.yg)("p",null,"If we now look at the access graph, lo and behold: the lines and arrows from all 3 clients to ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," are now green: all the necessary intents have been declared. (And a lot of other lines are now green too, since these clients also call many other servers; these other servers may soon be ready to protect too.)"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"3 intents declared",src:n(7006).A,width:"1320",height:"728"})),(0,a.yg)("p",null,"You can look into at any of the calls to the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," and see they would not be blocked if this server were protected, e.g.:"),(0,a.yg)("img",{src:"/img/guides/protect-1-service-network-policies/frontend-calls-productcatalogservice-with-intents.png",alt:"Clicked on frontend to productcatalogservice",width:"600"}),(0,a.yg)("p",null,"And you can verify the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," would not block ",(0,a.yg)("em",{parentName:"p"},"any")," of its discovered clients by clicking on it:"),(0,a.yg)("img",{src:"/img/guides/protect-1-service-network-policies/productcatalogservice-with-intents.png",alt:"Clicked on productcatalogservice",width:"600"}),(0,a.yg)("p",null,"The server is still ",(0,a.yg)("span",{style:{color:"#F3AF3D",fontWeight:"bold"}},"yellow")," because it's unprotected ","\u2014"," let's fix that."),(0,a.yg)("h3",{id:"protect-the-productcatalogservice"},"Protect the ",(0,a.yg)("inlineCode",{parentName:"h3"},"productcatalogservice")),(0,a.yg)("p",null,"Now that we've verified no intended clients would be blocked, we can safely protect the server."),(0,a.yg)("p",null,"To do so, recall that we configured Otterize OSS to be in the ",(0,a.yg)("inlineCode",{parentName:"p"},"defaultShadow")," mode: by default, it's in shadow mode for all services, not actually managing network policies for them. To protect a service is a simple matter of applying a ",(0,a.yg)("inlineCode",{parentName:"p"},"ProtectedService")," YAML for it, overriding the default for it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v2beta1\nkind: ProtectedService\nmetadata:\n  name: productcatalogservice\n  namespace: otterize-ecom-demo\nspec:\n  name: productcatalogservice\n  kind: Service\n\n")),(0,a.yg)("p",null,"Let's apply this file to our cluster:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/guides/protect-1-service-network-policies/protect-productcatalogservice.yaml\n")),(0,a.yg)("p",null,"This has two effects:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Applies a default-deny ingress network policy to the ",(0,a.yg)("inlineCode",{parentName:"li"},"productcatalogservice")," to protect it against unauthorized (undeclared) access."),(0,a.yg)("li",{parentName:"ol"},"Creates and manages network policies (including managing labels on client pods, this namespace, and this server pod) for all declared access. In other words, it enforces network policies only ",(0,a.yg)("strong",{parentName:"li"},"for this ",(0,a.yg)("inlineCode",{parentName:"strong"},"productcatalogservice")," server"),".")),(0,a.yg)("p",null,"Let's look again at the access graph to see what happened in the cluster:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"3 intents declared and server protected",src:n(6773).A,width:"1336",height:"702"})),(0,a.yg)("p",null,"Sure enough, the ",(0,a.yg)("inlineCode",{parentName:"p"},"productcatalogservice")," is ",(0,a.yg)("span",{style:{color:"#238C32",fontWeight:"bold"}},"green"),": it's ",(0,a.yg)("strong",{parentName:"p"},"protected against unauthorized access"),", and ",(0,a.yg)("strong",{parentName:"p"},"allowing authorized clients"),". Clicking on it confirms this:"),(0,a.yg)("img",{src:"/img/guides/protect-1-service-network-policies/productcatalogservice-with-intents-protected.png",alt:"Clicked on productcatalogservice",width:"600"}),(0,a.yg)("h3",{id:"ready-for-production"},"Ready for production"),(0,a.yg)("h4",{id:"will-load-balancers-ingress-and-other-external-traffic-be-affected"},"Will load balancers, ingress, and other external traffic be affected?"),(0,a.yg)("p",null,"The intents operator automatically detects resources of kind ",(0,a.yg)("inlineCode",{parentName:"p"},"Service")," (with type ",(0,a.yg)("inlineCode",{parentName:"p"},"LoadBalancer")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"NodePort"),"), or of kind ",(0,a.yg)("inlineCode",{parentName:"p"},"Ingress"),", and creates network policies to allow external traffic to relevant pods."),(0,a.yg)("p",null,"You do not need to configure anything to get this to work. ",(0,a.yg)("a",{parentName:"p",href:"/reference/intents-operator#handling-external-traffic"},"Learn more here.")),(0,a.yg)("h4",{id:"will-admission-webhook-controllers-eg-policy-validators-like-kyverno-be-affected"},"Will admission webhook controllers, e.g. policy validators like Kyverno, be affected?"),(0,a.yg)("p",null,"Since you are not placing a global default-deny policy that would affect controllers in your cluster, only default-deny network policies on individual pods, Otterize will not affect calls to admission webhook controllers and they will continue functioning as before."),(0,a.yg)("h4",{id:"working-with-otterize-in-cicd"},"Working with Otterize in CI/CD"),(0,a.yg)("p",null,"We recommend placing the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientIntents")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ProtectedService")," resource YAMLs alongside the services that own them, in their respective Git repositories:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"ProtectedService")," YAMLs alongside the servers they are protecting, e.g. in the Helm chart belonging to the server."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ClientIntents")," YAMLs, whether they were generated from the network mapper or created and maintained by the client developer teams, alongside each client, e.g. in the Helm chart belonging to the client.")),(0,a.yg)("h3",{id:"in-summary"},"In summary"),(0,a.yg)("p",null,"So what have we learned? You can gradually roll out IBAC and drive towards zero trust, service by service, in a safe, predictable, and quick way, by following 4 simple steps:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Choose a service to protect, say ",(0,a.yg)("inlineCode",{parentName:"li"},"<NAME>.<NAMESPACE>"),"."),(0,a.yg)("li",{parentName:"ol"},"Export its client's intents: ",(0,a.yg)("inlineCode",{parentName:"li"},"otterize network-mapper export --server <NAME>.<NAMESPACE> > protect-<NAME>.yaml"),"."),(0,a.yg)("li",{parentName:"ol"},"Declare those intents: ",(0,a.yg)("inlineCode",{parentName:"li"},"kubectl apply -f protect-<NAME>.yaml"),"."),(0,a.yg)("li",{parentName:"ol"},"Now protect that server by ",(0,a.yg)("inlineCode",{parentName:"li"},"kubectl apply -f")," with the following YAML:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v2beta1\nkind: ProtectedService\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  name: <NAME>\n  kind: <KIND>\n")),(0,a.yg)("p",null,"Lather, rinse repeat, protecting service after service as you grow more comfortable, with the access graph providing visibility at each step of the way."),(0,a.yg)("h2",{id:"teardown"},"Teardown"),(0,a.yg)("p",null,"To remove the deployed demo run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/all.yaml\nkubectl delete -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/ecom-demo.yaml\nkubectl delete namespace otterize-ecom-demo\n")))}m.isMDXComponent=!0},6773:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/3-intents-protected-ef03dbfc8c08b40a5b8935e8dc3baa2e.png"},7006:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/3-intents-unprotected-1fed4826cf7c84409552dea998479e64.png"},1989:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/enlarged-no-intents-d749cef0f7a23ba1c4e2ccf0142a29b6.png"},8710:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/network-map-e633f695152277a58fd175abcafe998d.png"}}]);