"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4264,8401],{9365:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(6540),i=n(53);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.A)(l.tabItem,o),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>N});var a=n(8168),i=n(6540),l=n(53),o=n(3104),r=n(6347),s=n(7485),c=n(1682),u=n(9466);function d(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function p(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(l),(0,i.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[o,r]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,c]=g({queryString:n,groupId:a}),[d,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Dv)(n);return[a,(0,i.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),y=(()=>{const e=s??d;return h({value:e,tabValues:l})?e:null})();(0,i.useLayoutEffect)((()=>{y&&r(y)}),[y]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),m(e)}),[c,m,l]),tabValues:l}}var y=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==r&&(d(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.A)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:p},o,{className:(0,l.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":r===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=m(e);return i.createElement("div",{className:(0,l.A)("tabs-container",b.tabList)},i.createElement(f,(0,a.A)({},e,t)),i.createElement(k,(0,a.A)({},e,t)))}function N(e){const t=(0,y.A)();return i.createElement(v,(0,a.A)({key:String(t)},e))}},1202:(e,t,n)=>{n.d(t,{A:()=>I});var a=n(8168),i=n(6540),l=n(2303),o=n(53),r=n(6058),s=n(7559),c=n(4291);const u={codeBlockContainer:"codeBlockContainer_APcc"};function d(e){let{as:t,...n}=e;const l=(0,r.A)(),d=(0,c.M$)(l);return i.createElement(t,(0,a.A)({},n,{style:d,className:(0,o.A)(n.className,u.codeBlockContainer,s.G.common.codeBlock)}))}const p={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function h(e){let{children:t,className:n}=e;return i.createElement(d,{as:"pre",tabIndex:0,className:(0,o.A)(p.codeBlockStandalone,"thin-scrollbar",n)},i.createElement("code",{className:p.codeBlockLines},t))}var g=n(6342),m=n(6591),y=n(8382);const b={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=n(6025);function k(e){let{line:t,classNames:n,showLineNumbers:l,getLineProps:r,getTokenProps:s}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=r({line:t,className:(0,o.A)(n,l&&b.codeLine)}),u=t.map(((e,t)=>i.createElement("span",(0,a.A)({key:t},s({token:e,key:t})))));return i.createElement("span",c,l?i.createElement(i.Fragment,null,i.createElement("span",{className:b.codeLineNumber}),i.createElement("span",{className:b.codeLineContent},u)):u,i.createElement("br",null))}var v=n(9242),N=n(1312),w=n(1473),T=n(4115);const A={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function C(e){let{code:t,className:n}=e;const[a,l]=(0,i.useState)(!1),r=(0,i.useRef)(void 0),s=(0,i.useCallback)((()=>{(0,v.A)(t),l(!0),r.current=window.setTimeout((()=>{l(!1)}),1e3)}),[t]);return(0,i.useEffect)((()=>()=>window.clearTimeout(r.current)),[]),i.createElement("button",{type:"button","aria-label":a?(0,N.T)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,N.T)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,N.T)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,o.A)("clean-btn",n,A.copyButton,a&&A.copyButtonCopied),onClick:s},i.createElement("span",{className:A.copyButtonIcons,"aria-hidden":"true"},i.createElement(w.A,{className:A.copyButtonIcon}),i.createElement(T.A,{className:A.copyButtonSuccessIcon})))}var L=n(5048);const z={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function E(e){let{className:t,onClick:n,isEnabled:a}=e;const l=(0,N.T)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return i.createElement("button",{type:"button",onClick:n,className:(0,o.A)("clean-btn",t,a&&z.wordWrapButtonEnabled),"aria-label":l,title:l},i.createElement(L.A,{className:z.wordWrapButtonIcon,"aria-hidden":"true"}))}function S(e){let{children:t,className:n="",metastring:l,title:s,showLineNumbers:u,language:h}=e;const{prism:{defaultLanguage:b,magicComments:v}}=(0,g.p)(),N=h??(0,c.Op)(n)??b,w=(0,r.A)(),T=(0,m.f)(),A=(0,c.wt)(l)||s,{lineClassNames:L,code:z}=(0,c.Li)(t,{metastring:l,language:N,magicComments:v}),S=(0,f.A)("/",{absolute:!0}).slice(0,-1),I=z.replaceAll("${ABSOLUTE_URL}",S),B=u??(0,c._u)(l);return i.createElement(d,{as:"div",className:(0,o.A)(n,N&&!n.includes(`language-${N}`)&&`language-${N}`)},A&&i.createElement("div",{className:p.codeBlockTitle},A),i.createElement("div",{className:p.codeBlockContent},i.createElement(y.Ay,(0,a.A)({},y.Gs,{theme:w,code:I,language:N??"text"}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:l}=e;return i.createElement("pre",{tabIndex:0,ref:T.codeBlockRef,className:(0,o.A)(t,p.codeBlock,"thin-scrollbar")},i.createElement("code",{className:(0,o.A)(p.codeBlockLines,B&&p.codeBlockLinesWithNumbering)},n.map(((e,t)=>i.createElement(k,{key:t,line:e,getLineProps:a,getTokenProps:l,classNames:L[t],showLineNumbers:B})))))})),i.createElement("div",{className:p.buttonGroup},(T.isEnabled||T.isCodeScrollable)&&i.createElement(E,{className:p.codeButton,onClick:()=>T.toggle(),isEnabled:T.isEnabled}),i.createElement(C,{className:p.codeButton,code:I}))))}function I(e){let{children:t,...n}=e;const o=(0,l.A)(),r=function(e){return i.Children.toArray(e).some((e=>(0,i.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),s="string"==typeof r?S:h;return i.createElement(s,(0,a.A)({key:String(o)},n),r)}},6351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var a=n(8168),i=(n(6540),n(5680)),l=(n(1202),n(1470)),o=n(9365);const r={sidebar_position:3,title:"Linkerd AuthorizationPolicy automation",image:"/img/quick-tutorials/k8s-linkerd-authorization-policies/social.png"},s=void 0,c={unversionedId:"features/linkerd/tutorials/linkerd-authorization-policies",id:"features/linkerd/tutorials/linkerd-authorization-policies",title:"Linkerd AuthorizationPolicy automation",description:"Otterize automates mTLS-based, HTTP-level pod-to-pod access control with Linkerd authorization (authZ) policies, within your Kubernetes cluster.",source:"@site/docs/features/linkerd/tutorials/linkerd-authorization-policies.mdx",sourceDirName:"features/linkerd/tutorials",slug:"/features/linkerd/tutorials/linkerd-authorization-policies",permalink:"/features/linkerd/tutorials/linkerd-authorization-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/linkerd/tutorials/linkerd-authorization-policies.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Linkerd AuthorizationPolicy automation",image:"/img/quick-tutorials/k8s-linkerd-authorization-policies/social.png"},sidebar:"docSidebar",previous:{title:"Linkerd | Overview",permalink:"/features/linkerd/"},next:{title:"Intents operator",permalink:"/reference/intents-operator/"}},u={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Install Linkerd",id:"1-install-linkerd",level:3},{value:"2. Deploy Otterize",id:"2-deploy-otterize",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Deploy the two clients and the server",id:"deploy-the-two-clients-and-the-server",level:3},{value:"Apply intents",id:"apply-intents",level:3},{value:"See it in action",id:"see-it-in-action",level:3},{value:"View it in the cloud",id:"view-it-in-the-cloud",level:3},{value:"What did we accomplish?",id:"what-did-we-accomplish",level:3},{value:"Teardown",id:"teardown",level:2}],p={toc:d},h="wrapper";function g(e){let{components:t,...r}=e;return(0,i.yg)(h,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Otterize automates mTLS-based, HTTP-level pod-to-pod access control with Linkerd authorization (authZ) policies, within your Kubernetes cluster."),(0,i.yg)("p",null,"Implementing this kind of access control with Linkerd can be challenging.\nFor example, each target server needs a matching ",(0,i.yg)("inlineCode",{parentName:"p"},"Server")," resource, ",(0,i.yg)("inlineCode",{parentName:"p"},"MeshTLSAuthentication")," resources need to be created & matched with identities\nin order to use mTLS based authorization policies, etc. Using Otterize ",(0,i.yg)("inlineCode",{parentName:"p"},"ClientIntents"),", this is all managed for you."),(0,i.yg)("p",null,"To help you avoid manually managing complicated authorization policies per server, Otterize implements ",(0,i.yg)("strong",{parentName:"p"},"intent-based access control")," (IBAC).\nYou just declare what calls the client pods intend to make,\nand everything is automatically wired together so only intended calls are allowed."),(0,i.yg)("p",null,"In this tutorial, we will:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Deploy a Linkerd demo application with two client pods and one server pod."),(0,i.yg)("li",{parentName:"ul"},"Declare that the first client intends to call the server with a specific HTTP path and method."),(0,i.yg)("li",{parentName:"ul"},"See that a Linkerd ",(0,i.yg)("inlineCode",{parentName:"li"},"Server")," resource was created for our target, a ",(0,i.yg)("inlineCode",{parentName:"li"},"MeshTLSAuthentication")," resource was created for our client, and an ",(0,i.yg)("inlineCode",{parentName:"li"},"AuthorizationPolicy")," was autogenerated to allow that traffic, and to block the (undeclared) calls from the other client.")),(0,i.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("h3",{id:"1-install-linkerd"},"1. Install Linkerd"),(0,i.yg)("p",null,"Install Linkerd by following the ",(0,i.yg)("a",{parentName:"p",href:"https://linkerd.io/2-edge/tasks/install/"},"Installing Linkerd")," tutorial."),(0,i.yg)("h3",{id:"2-deploy-otterize"},"2. Deploy Otterize"),(0,i.yg)("p",null,"If you do not have a cluster, we will need to prepare one with ",(0,i.yg)("a",{parentName:"p",href:"/overview/installation#create-a-cluster-with-support-for-network-policies"},"network policy support")),(0,i.yg)("p",null,"To deploy Otterize, head over to ",(0,i.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"Otterize Cloud")," and associate a Kubernetes cluster on the ",(0,i.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),", and follow the instructions. If you already have a Kubernetes cluster connected, skip this step."),(0,i.yg)("p",null,"Otterize should be deployed with enforcement on."),(0,i.yg)("h2",{id:"tutorial"},"Tutorial"),(0,i.yg)("h3",{id:"deploy-the-two-clients-and-the-server"},"Deploy the two clients and the server"),(0,i.yg)("p",null,"Deploy a simple example consisting of ",(0,i.yg)("inlineCode",{parentName:"p"},"client")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"other-client")," calling ",(0,i.yg)("inlineCode",{parentName:"p"},"nginx")," over HTTP:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"curl ${ABSOLUTE_URL}/code-examples/linkerd-authorization-policies/all.yaml | linkerd inject - | kubectl apply -f -\n")),(0,i.yg)("p",null,"Notice we use ",(0,i.yg)("inlineCode",{parentName:"p"},"linkerd inject")," from Linkerd's CLI beforce we apply our resources to Kubernetes, to include them as part of the mesh."),(0,i.yg)("h3",{id:"apply-intents"},"Apply intents"),(0,i.yg)("p",null,"We will now declare that the ",(0,i.yg)("strong",{parentName:"p"},"client")," intends to call the ",(0,i.yg)("strong",{parentName:"p"},"server")," at a particular HTTP path using a specific HTTP method."),(0,i.yg)("p",null,"When the intents YAML is applied, creating a custom resource of type ",(0,i.yg)("inlineCode",{parentName:"p"},"ClientIntents"),",\nOtterize will start creating Linkerd resources to enable the intended access and to block non-declared access:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"A ",(0,i.yg)("inlineCode",{parentName:"li"},"Server")," resource is created for the target in the ",(0,i.yg)("inlineCode",{parentName:"li"},"ClientIntents")," (if required). A ",(0,i.yg)("inlineCode",{parentName:"li"},"Server")," resource represents a service in the mesh that listens for incoming requests. It's configured to define the service's protocol, port, and other relevant settings."),(0,i.yg)("li",{parentName:"ol"},"A ",(0,i.yg)("inlineCode",{parentName:"li"},"MeshTLSAuthentication")," resource that is used to represent mesh identities, which will be created for our client."),(0,i.yg)("li",{parentName:"ol"},"An ",(0,i.yg)("inlineCode",{parentName:"li"},"HTTPRoute")," that will represent a single path, allowing for more fine-grained enforcement. This will be attached to the ",(0,i.yg)("inlineCode",{parentName:"li"},"Server")," resource."),(0,i.yg)("li",{parentName:"ol"},"Finally, an ",(0,i.yg)("inlineCode",{parentName:"li"},"AuthorizationPolicy")," to bind it all together - enabling the intended traffic from\n(",(0,i.yg)("strong",{parentName:"li"},"client")," ","\u2192"," ",(0,i.yg)("strong",{parentName:"li"},"server")," with the declared path and method) and block all unintended calls (e.g., ",(0,i.yg)("strong",{parentName:"li"},"client-other")," ","\u2192"," ",(0,i.yg)("strong",{parentName:"li"},"server"),").")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"You can click on the services or the lines connecting them to see which ClientIntents you need to apply to make the connection go green!")),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Here is the ",(0,i.yg)("inlineCode",{parentName:"li"},"intents.yaml")," declaration of the client, which we will apply below:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v2beta1\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace: otterize-tutorial-linkerd\nspec:\n  workload:\n    name: client\n  targets:\n    - kubernetes:\n        name: nginx\n        kind: Deployment\n        http:\n          - path: /client-path\n            methods: [ GET ]\n")),(0,i.yg)("p",null,"To apply it, use:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -n otterize-tutorial-linkerd -f ${ABSOLUTE_URL}/code-examples/linkerd-authorization-policies/intents.yaml\n")),(0,i.yg)("h3",{id:"see-it-in-action"},"See it in action"),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Optional: check deployment status"),"Check that the client and server pods were deployed",(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"```bash\nkubectl get pods -n otterize-tutorial-linkerd\n```\n\nYou should see\n\n```\nNAME                           READY   STATUS    RESTARTS   AGE\nclient-68b775f766-749r4         2/2     Running   0          32s\nnginx-c646898-2lq7l             2/2     Running   0          32s\nother-client-74cc54f7b5-9rctd   2/2     Running   0          32s\n```\n"))),(0,i.yg)("p",null,"Monitor both client attempts to call the server with additional terminal windows,\nso we can see the effects of our changes in real time."),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Open a new terminal window ","[client]")," and tail the client log:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-linkerd deploy/client\n")),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Expected output"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"At this point the client should be able to communicate with the server:\n\n```\nCalling server...\nHTTP/1.1 200 OK\n...\nhello from /client-path\n```\n"))),(0,i.yg)("ol",{start:3},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Open another terminal window ","[client-other]")," and tail the other-client log:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-linkerd deploy/other-client\n")),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Expected output"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"At this point the client should be able to communicate with the server:\n\n```\nCalling server...\nHTTP/1.1 200 OK\n...\nhello from /other-client-path\n```\n"))),(0,i.yg)("p",null,"Keep an eye on the logs being tailed in the ",(0,i.yg)("strong",{parentName:"p"},"[other-client]")," terminal window,\nand apply this ",(0,i.yg)("inlineCode",{parentName:"p"},"intents.yaml")," file in your ",(0,i.yg)("strong",{parentName:"p"},"main terminal window")," using:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f ${ABSOLUTE_URL}/code-examples/linkerd-authorization-policies/intents.yaml\n")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Client intents are the cornerstone of ",(0,i.yg)("a",{parentName:"p",href:"/overview/intent-based-access-control"},"intent-based access control (IBAC)"),".")),(0,i.yg)("p",null,"as expected since it didn't declare its intents:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nhello from /other-client-path  # <- before applying the intents file\n# highlight-start\nCalling server...              # <- after applying the intents file\ncurl timed out\nTerminated\n# highlight-end\n")),(0,i.yg)("ol",{start:3},(0,i.yg)("li",{parentName:"ol"},"And in the ",(0,i.yg)("strong",{parentName:"li"},"[client]")," terminal you should see that calls go through, as expected since they were declared:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nhello from /client-path\n")),(0,i.yg)("h3",{id:"view-it-in-the-cloud"},"View it in the cloud"),(0,i.yg)("p",null,"Go back to see the ",(0,i.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"access graph in your browser"),":"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Access graph",src:n(2822).A,width:"1077",height:"616"})),(0,i.yg)("p",null,"And upon clicking the green arrow:\n",(0,i.yg)("img",{alt:"Access graph",src:n(1760).A,width:"795",height:"625"})),(0,i.yg)("p",null,"It's now clear what happened:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"The server is now protected, and is also blocking some of its clients."),(0,i.yg)("li",{parentName:"ol"},"Calls from ",(0,i.yg)("strong",{parentName:"li"},"[client]")," ","\u2192"," ",(0,i.yg)("strong",{parentName:"li"},"[nginx]")," are declared and therefore allowed (green arrow)."),(0,i.yg)("li",{parentName:"ol"},"Calls from ",(0,i.yg)("strong",{parentName:"li"},"[client-other]")," ","\u2192"," ",(0,i.yg)("strong",{parentName:"li"},"[nginx]")," are not declared and therefore blocked (red arrow). Click on the arrow to see what to do about it.")),(0,i.yg)("admonition",{title:"Done!",type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Otterize did its job of both protecting the server ",(0,i.yg)("em",{parentName:"p"},"and")," allowing intended access.")),(0,i.yg)("h3",{id:"what-did-we-accomplish"},"What did we accomplish?"),(0,i.yg)("p",null,"Controlling access through Linkerd authorization policies no longer means having to write AuthorizationPolicies, Server, MeshTLSAuth or HTTPRoute resources."),(0,i.yg)("p",null,"Otterize generated a specific Linkerd authorization policy on the ingress of the pod of the server, allowing the server to\nbe accessed by the pod of the client, based on that client's declared intent. Otterize automated the creation of a ",(0,i.yg)("inlineCode",{parentName:"p"},"Server")," resource\nand its pairing with the target server through labels, the creation of a ",(0,i.yg)("inlineCode",{parentName:"p"},"MeshTLSAuthentication")," resource and its pairing with the client's service account,\nand binding it all to an ",(0,i.yg)("inlineCode",{parentName:"p"},"AuthorizationPolicy")," to protect the server and allow only intended access."),(0,i.yg)("p",null,"Otterize saved us from doing all this work: by simply declaring the client's intents in ",(0,i.yg)("inlineCode",{parentName:"p"},"intents.yaml"),",\nall the appropriate configuration was managed automatically behind the scenes."),(0,i.yg)("p",null,"Have a look at the Linkerd resources that Otterize automatically generated:"),(0,i.yg)(l.A,{mdxType:"Tabs"},(0,i.yg)(o.A,{value:"server.yaml",label:"Server",default:!0,mdxType:"TabItem"},(0,i.yg)("p",null,"This represents a server in the mesh that listens for incoming requests. It's configured to define the service's protocol, port, and other relevant settings.\nMatched with the target pod using label selectors, autogenerated by Otterize."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy.linkerd.io/v1beta3\nkind: Server\nmetadata:\n  name: server-for-nginx-port-80\n  namespace: otterize-tutorial-linkerd\nspec:\n  accessPolicy: deny\n  podSelector:\n    matchLabels:\n      # highlight-next-line\n      # Pods are automatically labeled by Otterize\n      # highlight-next-line\n      intents.otterize.com/service: nginx-otterize-tutorial-li-efa4db\n  # highlight-next-line\n  # Automatically determined by looking up the Kubernetes Service for this server\n  # highlight-next-line\n  port: 80\n  proxyProtocol: unknown\n\n"))),(0,i.yg)(o.A,{value:"meshtlsauth.yaml",label:"MeshTLSAuthentication",default:!0,mdxType:"TabItem"},(0,i.yg)("p",null,"Otterize pairs ",(0,i.yg)("inlineCode",{parentName:"p"},"MeshTLSAuthentication")," with the client workload's service account."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy.linkerd.io/v1alpha1\nkind: MeshTLSAuthentication\nmetadata:\n  name: meshtls-for-client-client\n  namespace: otterize-tutorial-linkerd\nspec:\n  identities:\n    # highlight-next-line\n    # Automatically determined by looking up the Kubernetes ServiceAccount for this client\n    # highlight-next-line\n    - client-service-account.otterize-tutorial-linkerd.serviceaccount.identity.linkerd.cluster.local\n"))),(0,i.yg)(o.A,{value:"httproute.yaml",label:"HTTPRoute",default:!0,mdxType:"TabItem"},(0,i.yg)("p",null,'An HTTPRoute defines a set of rules which match HTTP requests to that resource. It is attached to a "parent" resource - in this case, the previously created ',(0,i.yg)("inlineCode",{parentName:"p"},"Server")," resource."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy.linkerd.io/v1beta3\nkind: HTTPRoute\nmetadata:\n  name: http-route-for-nginx-port-80-bc98e3\n  namespace: otterize-tutorial-linkerd\nspec:\n  parentRefs:\n    - group: policy.linkerd.io\n      kind: Server\n      name: server-for-nginx-port-80\n  rules:\n    - matches:\n        - path:\n            type: PathPrefix\n            # highlight-next-line\n            value: /client-path\n\n"))),(0,i.yg)(o.A,{value:"authpolicy.yaml",label:"AuthorizationPolicy",default:!0,mdxType:"TabItem"},(0,i.yg)("p",null,"Which binds it all together and mentions the ",(0,i.yg)("inlineCode",{parentName:"p"},"HTTPRoute")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"Server")," (The thing to be authorized) and the ",(0,i.yg)("inlineCode",{parentName:"p"},"MeshTLSAuthentication")," (the clients that have autorization)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy.linkerd.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: authpolicy-to-nginx-port-80-from-client-client-scmc2e2s\n  namespace: otterize-tutorial-linkerd\nspec:\n  requiredAuthenticationRefs:\n    - group: policy.linkerd.io\n      kind: MeshTLSAuthentication\n      # highlight-next-line\n      # Automatically generated by Otterize\n      # highlight-next-line\n      name: meshtls-for-client-client\n  targetRef:\n    group: policy.linkerd.io\n    kind: HTTPRoute\n    # highlight-next-line\n    # Automatically generated by Otterize\n    # highlight-next-line\n    name: http-route-for-nginx-port-80-bc98e3\n")))),(0,i.yg)("admonition",{title:"Bonus tutorial",type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Try to create an intents file yourself for ",(0,i.yg)("strong",{parentName:"p"},"client-other"),", and apply it to allow this other client to call the server.")),(0,i.yg)("h2",{id:"teardown"},"Teardown"),(0,i.yg)("p",null,"To remove Linkerd and the deployed examples run:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-linkerd\nlinkerd uninstall | kubectl delete -f -\n")))}g.isMDXComponent=!0},2822:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/linkerd-838fc3461e91570a8950eb47d0e2af31.png"},1760:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/linkerd_viz-ca5cdfccd71e621d6c40ce432e5c2bc9.png"}}]);