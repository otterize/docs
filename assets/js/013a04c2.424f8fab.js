"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1601],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>m});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(a),g=r,m=p["".concat(u,".").concat(g)]||p[g]||d[g]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},9610:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(8168),r=(a(6540),a(5680));const o={sidebar_position:2,title:"Automate Azure IAM for AKS",image:"/img/quick-tutorials/azure-iam-aks/social.png"},i=void 0,l={unversionedId:"features/azure-iam/tutorials/azure-iam-aks",id:"features/azure-iam/tutorials/azure-iam-aks",title:"Automate Azure IAM for AKS",description:"Otterize automates Azure IAM identities and role assignments for your Azure AKS workloads, all in Kubernetes.",source:"@site/docs/features/azure-iam/tutorials/azure-iam-aks.mdx",sourceDirName:"features/azure-iam/tutorials",slug:"/features/azure-iam/tutorials/azure-iam-aks",permalink:"/features/azure-iam/tutorials/azure-iam-aks",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/azure-iam/tutorials/azure-iam-aks.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Automate Azure IAM for AKS",image:"/img/quick-tutorials/azure-iam-aks/social.png"},sidebar:"docSidebar",previous:{title:"Azure IAM | Overview",permalink:"/features/azure-iam/"},next:{title:"Reference",permalink:"/features/azure-iam/reference"}},u={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Install the Azure CLI",id:"1-install-the-azure-cli",level:3},{value:"2. Create an Azure AKS cluster",id:"2-create-an-azure-aks-cluster",level:3},{value:"2. Deploy Otterize for Azure IAM",id:"2-deploy-otterize-for-azure-iam",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Create an Azure Blob Storage account &amp; container",id:"create-an-azure-blob-storage-account--container",level:3},{value:"Deploy the sample client",id:"deploy-the-sample-client",level:3},{value:"View logs for the client - access denied",id:"view-logs-for-the-client---access-denied",level:3},{value:"Label the client pod to create an Azure workload identity",id:"label-the-client-pod-to-create-an-azure-workload-identity",level:3},{value:"An Azure workload identity was created for the client pod",id:"an-azure-workload-identity-was-created-for-the-client-pod",level:4},{value:"The Kubernetes ServiceAccount was annotated with the workload identity ID",id:"the-kubernetes-serviceaccount-was-annotated-with-the-workload-identity-id",level:4},{value:"Apply intents to create the necessary IAM role assignments",id:"apply-intents-to-create-the-necessary-iam-role-assignments",level:3},{value:"The client can now list files in the Azure Blob Storage container!",id:"the-client-can-now-list-files-in-the-azure-blob-storage-container",level:3},{value:"What&#39;s next?",id:"whats-next",level:3},{value:"Teardown",id:"teardown",level:2}],c={toc:s},p="wrapper";function d(e){let{components:t,...a}=e;return(0,r.yg)(p,(0,n.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Otterize automates Azure IAM identities and role assignments for your Azure AKS workloads, all in Kubernetes."),(0,r.yg)("p",null,"In this tutorial, we will:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Optionally, spin up an AKS cluster, install the Otterize Kubernetes operator on it, and configure it to manage Azure IAM."),(0,r.yg)("li",{parentName:"ul"},"Deploy a client pod that lists files in an Azure Blog Storage container."),(0,r.yg)("li",{parentName:"ul"},"Label the client pod, telling the credentials operator to link its Kubernetes ServiceAccount with an Azure workload identity created for it."),(0,r.yg)("li",{parentName:"ul"},"Create a ",(0,r.yg)("inlineCode",{parentName:"li"},"ClientIntents")," resource allowing the client pod to access Azure Blob Storage, that tells the intents operator to create a role assignment and associate it with the previously created workload identity."),(0,r.yg)("li",{parentName:"ul"},"See that the client is now able to list files in the Azure Blob Storage container.")),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("p",null,"Already have Otterize deployed with the Azure IAM integration configured on your cluster? ",(0,r.yg)("a",{parentName:"p",href:"#tutorial"},"Skip to the tutorial.")),(0,r.yg)("h3",{id:"1-install-the-azure-cli"},"1. Install the Azure CLI"),(0,r.yg)("p",null,"Follow the installation instructions for the ",(0,r.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/cli/azure/install-azure-cli"},"Azure CLI"),"."),(0,r.yg)("h3",{id:"2-create-an-azure-aks-cluster"},"2. Create an Azure AKS cluster"),(0,r.yg)("p",null,"Before you start, you'll need an Azure AKS cluster, with OIDC issuer & workload identity enabled."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"How to set up an Azure AKS cluster using the Azure CLI"),(0,r.yg)("p",null,"Export the following environment variables:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'export LOCATION="eastus"\nexport RESOURCE_GROUP="otterizeAzureIAMTutorialResourceGroup"\nexport AKS_CLUSTER_NAME="otterizeAzureIAMTutorialAKSCluster"\n')),(0,r.yg)("p",null,"Create a resource group:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az group create --name $RESOURCE_GROUP --location $LOCATION\n")),(0,r.yg)("p",null,"Create an AKS cluster, with OIDC issuer and workload identity enabled:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az aks create -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --node-count 1 --enable-oidc-issuer --enable-workload-identity --generate-ssh-keys\n"))),(0,r.yg)("p",null,"Alternatively, update an existing AKS cluster to enable OIDC issuer and workload identity:"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"How to update an existing AKS cluster using the Azure CLI"),(0,r.yg)("p",null,"Export the following environment variables:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'export LOCATION="<YOUR_LOCATION>"\nexport RESOURCE_GROUP="<YOUR_RESOURCE_GROUP>"\nexport AKS_CLUSTER_NAME="<YOUR_AKS_CLUSTER_NAME>"\n')),(0,r.yg)("p",null,"Update the AKS cluster to enable OIDC issuer and workload identity:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az aks update -g $RESOURCE_GROUP -n $AKS_CLUSTER_NAME --enable-oidc-issuer --enable-workload-identity\n"))),(0,r.yg)("p",null,"Don't forget to configure your kubeconfig for your cluster. If using the example cluster above, use this command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az aks get-credentials -n $AKS_CLUSTER_NAME -g $RESOURCE_GROUP\n")),(0,r.yg)("h3",{id:"2-deploy-otterize-for-azure-iam"},"2. Deploy Otterize for Azure IAM"),(0,r.yg)("p",null,"To deploy Otterize, head over to ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"Otterize Cloud")," and:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a Kubernetes integration on the ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),", and follow the instructions. ",(0,r.yg)("em",{parentName:"p"},"Make sure to enable enforcement mode for this tutorial.")," If you already have a Kubernetes cluster connected, skip this step.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create an Azure IAM integration on the ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),"."),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Input your Azure tenant & subscription IDs. These are available in the Azure portal, or by running the following command:",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az account list --output table\n"))),(0,r.yg)("li",{parentName:"ul"},"If you are using the cluster from the previous step, the resource group name is ",(0,r.yg)("inlineCode",{parentName:"li"},"otterizeAzureIAMTutorialResourceGroup")," and the cluster name is ",(0,r.yg)("inlineCode",{parentName:"li"},"otterizeAzureIAMTutorialAKSCluster"),".")))),(0,r.yg)("p",null,"Once the Azure integration is configured, you'll be presented with instructions for configuring your Otterize integration with Azure IAM support.\nThis creates a managed identity and federated identity credential for the Otterize Kubernetes operator, and assigns it the resource group owner role on the resource group containing your AKS cluster, so that it is able to manage identitiies and role assignments for your AKS workloads.\nThis setup is required once per-cluster."),(0,r.yg)("p",null,"After Terraform has configured your cluster, click Next and you'll be presented with the configuration for deploying Otterize.\nSince you now have the Azure integration enabled, you need to redeploy Otterize with Azure integration enabled flag, providing it the client ID for the managed identity created during the terraform installation."),(0,r.yg)("h2",{id:"tutorial"},"Tutorial"),(0,r.yg)("h3",{id:"create-an-azure-blob-storage-account--container"},"Create an Azure Blob Storage account & container"),(0,r.yg)("p",null,"Create a general-purpose storage account using the Azure CLI:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export STORAGE_ACCOUNT_NAME=otterizeazureiamtutorial\naz storage account create \\\n  --name $STORAGE_ACCOUNT_NAME \\\n  --resource-group $RESOURCE_GROUP \\\n  --location $LOCATION\n")),(0,r.yg)("p",null,"Create a container in the storage account:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export STORAGE_CONTAINER_NAME=otterizeazureiamtutorialcontainer\naz storage container create \\\n    --account-name $STORAGE_ACCOUNT_NAME \\\n    --name $STORAGE_CONTAINER_NAME\n")),(0,r.yg)("p",null,"Upload a blob to the storage container:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'echo "Hello, Azure integration" > testfile.txt\naz storage blob upload \\\n    --account-name $STORAGE_ACCOUNT_NAME \\\n    --container-name $STORAGE_CONTAINER_NAME \\\n    --file testfile.txt \\\n    --name testfile.txt\n')),(0,r.yg)("h3",{id:"deploy-the-sample-client"},"Deploy the sample client"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'kubectl create namespace otterize-tutorial-azure-iam\nkubectl apply -n otterize-tutorial-azure-iam -f ${ABSOLUTE_URL}/code-examples/azure-iam-aks/client.yaml\nkubectl patch deployment -n otterize-tutorial-azure-iam client --type=\'json\' -p="[{\\"op\\": \\"replace\\", \\"path\\": \\"/spec/template/spec/containers/0/env\\", \\"value\\": [{\\"name\\": \\"AZURE_STORAGE_ACCOUNT\\", \\"value\\": \\"$STORAGE_ACCOUNT_NAME\\"}, {\\"name\\": \\"AZURE_STORAGE_CONTAINER\\", \\"value\\": \\"$STORAGE_CONTAINER_NAME\\"}]}]"\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Expand to see the deployment YAML"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-azure-iam\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: client\n  namespace: otterize-tutorial-azure-iam\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace: otterize-tutorial-azure-iam\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n        # Required by the Azure workload identity operator, only the pods with this label can use workload identity\n        azure.workload.identity/use: "true"\n    spec:\n      serviceAccountName: client\n      containers:\n        - name: client\n          image: mcr.microsoft.com/azure-cli\n          command: [ "/bin/sh", "-c", "--" ]\n          env:\n            - name: AZURE_STORAGE_ACCOUNT\n              value: otterizeazureiamtutorial\n            - name: AZURE_STORAGE_CONTAINER\n              value: otterizeazureiamtutorialcontainer\n          args:\n            - while true;\n              do\n                echo;\n                echo \'Client - The time is:\' $(date);\n                echo;\n                if [[ -z "$AZURE_CLIENT_ID" ]]; then echo "Azure client ID not set";\n                else\n                  echo \'Logging in using federated identity credentials\';\n                  az login -o table --federated-token $(cat $AZURE_FEDERATED_TOKEN_FILE) --service-principal -u $AZURE_CLIENT_ID -t $AZURE_TENANT_ID;\n                  echo;\n                  echo \'Listing storage blob container\' $AZURE_STORAGE_CONTAINER \'in storage account\' $AZURE_STORAGE_ACCOUNT;\n                  az storage blob list --container $AZURE_STORAGE_CONTAINER --account-name $AZURE_STORAGE_ACCOUNT --auth-mode login -o table;\n                  echo;\n                fi;\n                sleep 5;\n              done\n'))),(0,r.yg)("h3",{id:"view-logs-for-the-client---access-denied"},"View logs for the client - access denied"),(0,r.yg)("p",null,"The client logs will show that the Azure client ID environment variable is not set.\nThis is because no Azure workload identity has been created for the client pod yet."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f -n otterize-tutorial-azure-iam deploy/client\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"Client - The time is: Sun Mar 10 18:40:37 UTC 2024\n\nAzure client ID not set\n")),(0,r.yg)("h3",{id:"label-the-client-pod-to-create-an-azure-workload-identity"},"Label the client pod to create an Azure workload identity"),(0,r.yg)("p",null,"Label the client pod so that the Otterize credentials operator creates an Azure workload identity for it and binds its Kubernetes ServiceAccount to the newly created identity."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'metadata:\n  labels:\n    credentials-operator.otterize.com/create-azure-workload-identity: "true"\n')),(0,r.yg)("p",null,"To do this, we won't be labeling the pod directly, but instead patching the ",(0,r.yg)("inlineCode",{parentName:"p"},"template")," attribute of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Deployment")," we created earlier so that it updates the pod."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'kubectl patch deployment -n otterize-tutorial-azure-iam client -p \'{"spec": {"template":{"metadata":{"labels":{"credentials-operator.otterize.com/create-azure-workload-identity":"true"}}}} }\'\n')),(0,r.yg)("h4",{id:"an-azure-workload-identity-was-created-for-the-client-pod"},"An Azure workload identity was created for the client pod"),(0,r.yg)("p",null,"Let's inspect the created managed identity"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az identity list --query \"[?starts_with(name,'ottr-uai-')]\" --resource-group $RESOURCE_GROUP --output table\n")),(0,r.yg)("p",null,"In the output, you should see that a managed identity was created for the client workload, with the name starting with ",(0,r.yg)("inlineCode",{parentName:"p"},"ottr-uai-otterize-tutorial-azure-iam-client-..."),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"Name                                                                                  Location    TenantId                              PrincipalId                           ClientId                              ResourceGroup\n------------------------------------------------------------------------------------  ----------  ------------------------------------  ------------------------------------  ------------------------------------  ---------------------------------\nottr-uai-otterize-tutorial-azure-iam-client-otterizeAzureIAMTutorialAKSCluster-XXXXX  eastus      00000000-0000-0000-0000-000000000000  00000000-0000-0000-0000-000000000000  00000000-0000-0000-0000-000000000000  otterizeAzureIAMTutorialResourceGroup\n")),(0,r.yg)("p",null,"You could also inspect the federated identity credential created for the client workload:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'export WORKLOAD_IDENTITY_NAME=$(az identity list --query "[?starts_with(name,\'ottr-uai-otterize-tutorial-azure-iam-client-$AKS_CLUSTER_NAME\')].name" --resource-group $RESOURCE_GROUP  -o tsv)\naz identity federated-credential list --identity-name $WORKLOAD_IDENTITY_NAME --resource-group $RESOURCE_GROUP --output table --query "[].{name:name, subject:subject}"\n')),(0,r.yg)("p",null,"In the output, you should see that a federated identity credential was created for the client workload:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"Name                                                                                  Subject\n------------------------------------------------------------------------------------  --------------------------------------------------------\nottr-fic-otterize-tutorial-azure-iam-client-otterizeAzureIAMTutorialAKSCluster-XXXXX  system:serviceaccount:otterize-tutorial-azure-iam:client\n")),(0,r.yg)("h4",{id:"the-kubernetes-serviceaccount-was-annotated-with-the-workload-identity-id"},"The Kubernetes ServiceAccount was annotated with the workload identity ID"),(0,r.yg)("p",null,"The credentials operator automatically annotated the Kubernetes ServiceAccount for the client pod with the newly created workload identity"),(0,r.yg)("p",null,"Let's look at the service account:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get serviceaccount -n otterize-tutorial-azure-iam client -o yaml\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    # highlight-next-line\n    azure.workload.identity/client-id: 6fda2902-d98c-40f6-800d-29d5856e359a\n  name: client\n  namespace: otterize-tutorial-azure-iam\n")),(0,r.yg)("h3",{id:"apply-intents-to-create-the-necessary-iam-role-assignments"},"Apply intents to create the necessary IAM role assignments"),(0,r.yg)("p",null,"By annotating the pod, we've created a workload identity.\nWe now need to specify what we need to access, and the intents operator will create an Azure IAM role assignment accordingly."),(0,r.yg)("p",null,"We will specify the following ClientIntents, granting the ",(0,r.yg)("inlineCode",{parentName:"p"},"Storage Blob Data Contributor")," permission to the ",(0,r.yg)("inlineCode",{parentName:"p"},"otterizeazureiamtutorialcontainer")," container in the ",(0,r.yg)("inlineCode",{parentName:"p"},"otterizeazureiamtutorial")," storage account."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v1alpha3\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace: otterize-tutorial-azure-iam\nspec:\n  service:\n    name: client\n  calls:\n    - name: "/providers/Microsoft.Storage/storageAccounts/otterizeazureiamtutorial/blobServices/default/containers/otterizeazureiamtutorialcontainer"\n      type: azure\n      azureRoles:\n        - "Storage Blob Data Contributor"\n\n')),(0,r.yg)("p",null,"To apply these intents, run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'kubectl apply -n otterize-tutorial-azure-iam -f ${ABSOLUTE_URL}/code-examples/azure-iam-aks/clientintents.yaml\nkubectl patch clientintents -n otterize-tutorial-azure-iam client --type=\'json\' -p="[{\\"op\\": \\"replace\\", \\"path\\": \\"/spec/calls/0/name\\", \\"value\\": \\"/providers/Microsoft.Storage/storageAccounts/"$STORAGE_ACCOUNT_NAME"/blobServices/default/containers/"$STORAGE_CONTAINER_NAME"\\"}]"\n')),(0,r.yg)("h3",{id:"the-client-can-now-list-files-in-the-azure-blob-storage-container"},"The client can now list files in the Azure Blob Storage container!"),(0,r.yg)("p",null,"Let's look at the client logs again to see that no more errors are being reported:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f -n otterize-tutorial-azure-iam deploy/client\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"Client - The time is: Sun Mar 10 18:53:24 UTC 2024\n\nLogging in using federated identity credentials\nCloudName    HomeTenantId                          IsDefault    Name                  State    TenantId\n-----------  ------------------------------------  -----------  --------------------  -------  ------------------------------------\nAzureCloud   00000000-0000-0000-0000-000000000000  True         Azure subscription 1  Enabled  00000000-0000-0000-0000-000000000000\n\nListing storage blob container otterizeazureiamtutorialcontainer in storage account otterizeazureiamtutorial\nName          Blob Type    Blob Tier    Length    Content Type    Last Modified              Snapshot\n------------  -----------  -----------  --------  --------------  -------------------------  ----------\ntestfile.txt  BlockBlob    Hot          25        text/plain      2024-03-10T18:07:21+00:00\n\n\n")),(0,r.yg)("h3",{id:"whats-next"},"What's next?"),(0,r.yg)("p",null,"Try out some of the other quick tutorials to learn about how to use ClientIntents to manage network policies, Istio policies, PostgreSQL access, and more. You can use a single ClientIntents resource to specify all the access required for a pod."),(0,r.yg)("h2",{id:"teardown"},"Teardown"),(0,r.yg)("p",null,"To remove the deployed examples run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-azure-iam\n")),(0,r.yg)("p",null,"To delete the Azure blob storage account & container:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az storage account delete --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP\n")),(0,r.yg)("p",null,"To delete the cluster, if you created the one in this tutorial:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"az aks delete --name $AKS_CLUSTER_NAME --resource-group $RESOURCE_GROUP\n")))}d.isMDXComponent=!0}}]);