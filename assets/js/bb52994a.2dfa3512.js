"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>d});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,d=p["".concat(c,".").concat(m)]||p[m]||g[m]||o;return a?n.createElement(d,l(l({ref:t},u),{},{components:a})):n.createElement(d,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9430:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(8168),r=(a(6540),a(5680));const o={sidebar_position:2,title:"Automate GCP IAM for GKE",image:"/img/quick-tutorials/gcp-iam-gke/social.png"},l=void 0,i={unversionedId:"features/gcp-iam/tutorials/gcp-iam-gke",id:"features/gcp-iam/tutorials/gcp-iam-gke",title:"Automate GCP IAM for GKE",description:"Otterize automates GCP IAM roles and policies for your GCP GKE workloads, all in Kubernetes.",source:"@site/docs/features/gcp-iam/tutorials/gcp-iam-gke.mdx",sourceDirName:"features/gcp-iam/tutorials",slug:"/features/gcp-iam/tutorials/gcp-iam-gke",permalink:"/features/gcp-iam/tutorials/gcp-iam-gke",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/gcp-iam/tutorials/gcp-iam-gke.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Automate GCP IAM for GKE",image:"/img/quick-tutorials/gcp-iam-gke/social.png"},sidebar:"docSidebar",previous:{title:"GCP IAM | Overview",permalink:"/features/gcp-iam/"},next:{title:"Reference",permalink:"/features/gcp-iam/reference"}},c={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Create a GCP GKE cluster",id:"1-create-a-gcp-gke-cluster",level:3},{value:"2. Deploy Otterize for GCP IAM",id:"2-deploy-otterize-for-gcp-iam",level:3},{value:"Tutorial",id:"tutorial",level:2},{value:"Create a GCS bucket for the server to use",id:"create-a-gcs-bucket-for-the-server-to-use",level:3},{value:"Deploy the sample server and client",id:"deploy-the-sample-server-and-client",level:3},{value:"View logs for the server - access denied",id:"view-logs-for-the-server---access-denied",level:3},{value:"Label the server pod to create a GCP service account",id:"label-the-server-pod-to-create-a-gcp-service-account",level:3},{value:"A GCP service account was created and bound to the server&#39;s Kubernetes ServiceAccount",id:"a-gcp-service-account-was-created-and-bound-to-the-servers-kubernetes-serviceaccount",level:4},{value:"The Kubernetes ServiceAccount was annotated with the role ARN",id:"the-kubernetes-serviceaccount-was-annotated-with-the-role-arn",level:4},{value:"Apply intents to create the necessary IAM policy",id:"apply-intents-to-create-the-necessary-iam-policy",level:3},{value:"The server can now upload files to GCS!",id:"the-server-can-now-upload-files-to-gcs",level:3},{value:"What&#39;s next?",id:"whats-next",level:3},{value:"Teardown",id:"teardown",level:2}],u={toc:s},p="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(p,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Otterize automates GCP IAM roles and policies for your GCP GKE workloads, all in Kubernetes."),(0,r.yg)("p",null,"In this tutorial, we will:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Optionally, spin up a GKE cluster."),(0,r.yg)("li",{parentName:"ul"},"Deploy a server pod that uploads files to Google Cloud Storage, and a client pod that submits files to the server app."),(0,r.yg)("li",{parentName:"ul"},"Label the server pod, telling the credentials operator to link its Kubernetes ServiceAccount with a GCP service account created for it, such that GCP workload identity federation can recognize the pod."),(0,r.yg)("li",{parentName:"ul"},"Create a ",(0,r.yg)("inlineCode",{parentName:"li"},"ClientIntents")," resource allowing the server pod to upload to GCS, that tells the intents operator to update the previously-created GCP service account with the relevant permissions."),(0,r.yg)("li",{parentName:"ul"},"See that the files have been uploaded successfully.")),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("p",null,"Already have Otterize deployed with the IAM integration configured on your cluster? ",(0,r.yg)("a",{parentName:"p",href:"#tutorial"},"Skip to the tutorial.")),(0,r.yg)("h3",{id:"1-create-a-gcp-gke-cluster"},"1. Create a GCP GKE cluster"),(0,r.yg)("p",null,"Before you start, you'll need an GCP GKE cluster. The cluster should have\n",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity"},"Workload identity federation")," and\n",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall"},"Config Connector")," installed."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"How to set up a GKE cluster using gcloud CLI"),(0,r.yg)("p",null,"  Run the following commands to configure your project and create your cluster. ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"Don't have gcloud? Install it now.")),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a project and set the default gcloud configurations"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"export PROJECT_NAME=otterize-gcp-demo\nexport REGION=us-central1\ngcloud projects create $PROJECT_NAME\ngcloud config set project $PROJECT_NAME\ngcloud config set compute/region $REGION\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Enable the relevant APIS"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"gcloud services enable container.googleapis.com iamcredentials.googleapis.com cloudresourcemanager.googleapis.com\n")),(0,r.yg)("p",{parentName:"li"},"Ensure that you have at least the following ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/iam/docs/understanding-roles#kubernetes-engine-roles"},"IAM roles"),":\n","[roles/container.admin, roles/iam.serviceAccountAdmin]")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a new GKE cluster with workload identity and config connector enabled"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"gcloud container clusters create otterize-iam-gke-tutorial \\\n--release-channel regular \\\n--addons ConfigConnector \\\n--workload-pool=$PROJECT_NAME.svc.id.goog \\\n--logging=SYSTEM \\\n--monitoring=SYSTEM\n"))))),(0,r.yg)("p",null,"Don't forget to configure your kubeconfig for your cluster. If using the example cluster above, use this command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters get-credentials otterize-iam-gke-tutorial\n")),(0,r.yg)("h3",{id:"2-deploy-otterize-for-gcp-iam"},"2. Deploy Otterize for GCP IAM"),(0,r.yg)("p",null,"To deploy Otterize, head over to ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"Otterize Cloud")," and:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create a Kubernetes cluster on the ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),", and follow the instructions. ",(0,r.yg)("em",{parentName:"p"},"Make sure to enable enforcement mode for this tutorial.")," If you already have a Kubernetes cluster connected, skip this step.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create an GCP IAM integration on the ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),"."))),(0,r.yg)("p",null,"If you are using the cluster from the previous step, the cluster name is ",(0,r.yg)("inlineCode",{parentName:"p"},"otterize-iam-gke-tutorial")," and the region is ",(0,r.yg)("inlineCode",{parentName:"p"},"us-central1"),"."),(0,r.yg)("p",null,"Once the GCP integration is configured, you'll be presented with instructions for configuring your Otterize integration with GCP IAM support."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"If you don't have a GCP service account for config connector"),', make sure to toggle "I don\'t have Config Connector on my cluster". This will\ntell terraform to create a GCP service account for config connector and give it the necessary permissions to manage GCP IAM.\nChoose this option if you deployed your GKE cluster using the instructions in the previous step.  '),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"If you have a GCP service account for config connector"),', keep the "I have Config Connector deployed with a GCP service account" toggle and provide the service account name.\nThis will tell terraform to use the existing service account and give it the necessary permissions to manage GCP IAM.')),(0,r.yg)("p",null,"After Terraform has configured your cluster, click Next and you'll be presented with the configuration for deploying Otterize.\nSince you now have the GCP integration enabled, you need to redeploy Otterize with GCP integration enabled flag, providing\nit the client ID for the managed identity created during the terraform installation."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"See how to manually configure Config Connector on your cluster for Otterize"),(0,r.yg)("p",null,"You may also manually configure your clusters config connector to be used with Otterize."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Configure the GCP service account for Config Connector",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Create a service account for Config Connector",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"  gcloud iam service-accounts create [CONFIG_CONNECTOR_SA_NAME]\n"))),(0,r.yg)("li",{parentName:"ul"},"Add the following permissions to the service account",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"  roles/iam.roleAdmin\n  roles/iam.securityAdmin\n  roles/iam.serviceAccountAdmin\n  roles/iam.workloadIdentityUser\n")),"You can use the following command to add permissions to the service account",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'  gcloud projects add-iam-policy-binding $PROJECT_NAME \\\n  --member="serviceAccount:[CONFIG_CONNECTOR_SA_NAME]@$PROJECT_NAME.iam.gserviceaccount.com" \\\n  --role="roles/iam.roleAdmin"\n'))),(0,r.yg)("li",{parentName:"ul"},"Bind the service account to workload identity",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'  gcloud iam service-accounts add-iam-policy-binding \\\n  [CONFIG_CONNECTOR_SA_NAME]@$PROJECT_NAME.iam.gserviceaccount.com \\\n  --member="serviceAccount:$PROJECT_NAME.svc.id.goog[cnrm-system/cnrm-controller-manager]" \\\n  --role="roles/iam.workloadIdentityUser"\n'))))),(0,r.yg)("li",{parentName:"ol"},"Apply the following YAML to your kubernetes cluster to finish the config connector configuration.",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: core.cnrm.cloud.google.com/v1beta1\nkind: ConfigConnector\nmetadata:\n  name: configconnector.core.cnrm.cloud.google.com\nspec:\n  mode: cluster\n  googleServiceAccount: "[CONFIG_CONNECTOR_SA_NAME]@$PROJECT_NAME.iam.gserviceaccount.com"\n'))))),(0,r.yg)("h2",{id:"tutorial"},"Tutorial"),(0,r.yg)("h3",{id:"create-a-gcs-bucket-for-the-server-to-use"},"Create a GCS bucket for the server to use"),(0,r.yg)("p",null,"First, we need to pick a  bucket name. Because GCS buckets are globally unique,\nwe will save the bucket name in an environment variable for use later."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export BUCKET_NAME=otterize-tutorial-bucket-`date +%s`\necho $BUCKET_NAME\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud config set project $PROJECT_NAME\ngsutil mb -c standard -l us-central1 gs://$BUCKET_NAME\n")),(0,r.yg)("h3",{id:"deploy-the-sample-server-and-client"},"Deploy the sample server and client"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'kubectl create namespace otterize-tutorial-gcp-iam\nkubectl apply -n otterize-tutorial-gcp-iam -f ${ABSOLUTE_URL}/code-examples/gcp-iam-gke/client-and-server.yaml\nkubectl patch deployment -n otterize-tutorial-gcp-iam server --type=\'json\' -p="[{\\"op\\": \\"replace\\", \\"path\\": \\"/spec/template/spec/containers/0/env\\", \\"value\\": [{\\"name\\": \\"BUCKET_NAME\\", \\"value\\": \\"$BUCKET_NAME\\"}]}]"\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Expand to see the deployment YAML"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-gcp-iam\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: server\n  namespace: otterize-tutorial-gcp-iam\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace: otterize-tutorial-gcp-iam\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          imagePullPolicy: Always\n          image: 'public.ecr.aws/e3b4k2v5/gcp-tutorial:client'\n          ports:\n            - containerPort: 80\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\n  namespace: otterize-tutorial-gcp-iam\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      labels:\n        app: server\n    spec:\n      serviceAccountName: server\n      containers:\n        - name: server\n          imagePullPolicy: Always\n          image: 'public.ecr.aws/e3b4k2v5/gcp-tutorial:server'\n          ports:\n            - containerPort: 80\n          env:\n            - name: BUCKET_NAME\n              value: \"otterize-demo-bucket\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: server\n  namespace: otterize-tutorial-gcp-iam\nspec:\n  type: ClusterIP\n  selector:\n    app: server\n  ports:\n    - name: http\n      port: 80\n      targetPort: 80\n"))),(0,r.yg)("h3",{id:"view-logs-for-the-server---access-denied"},"View logs for the server - access denied"),(0,r.yg)("p",null,"The server logs will show that it fails to upload files to the GCS bucket."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f -n otterize-tutorial-gcp-iam deploy/server\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"Error 403: <service_account> does not have storage.objects.create access to the Google Cloud Storage object.\n# highlight-next-line\nPermission 'storage.objects.create' denied on resource (or it may not exist).\n")),(0,r.yg)("h3",{id:"label-the-server-pod-to-create-a-gcp-service-account"},"Label the server pod to create a GCP service account"),(0,r.yg)("p",null,"Label the server ",(0,r.yg)("inlineCode",{parentName:"p"},"Pod")," so that the Otterize credentials operator creates a GCP service account and binds to the pods Kubernetes ServiceAccount."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'metadata:\n  labels:\n    credentials-operator.otterize.com/create-gcp-sa: "true"\n')),(0,r.yg)("p",null,"To do this, we won't be labeling the ",(0,r.yg)("inlineCode",{parentName:"p"},"Pod")," directly, but instead patching the ",(0,r.yg)("inlineCode",{parentName:"p"},"template")," attribute of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Deployment")," we created earlier so that it updates the ",(0,r.yg)("inlineCode",{parentName:"p"},"Pod"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'kubectl patch deployment -n otterize-tutorial-gcp-iam server -p \'{"spec": {"template":{"metadata":{"labels":{"credentials-operator.otterize.com/create-gcp-sa":"true"}}}} }\'\n')),(0,r.yg)("h4",{id:"a-gcp-service-account-was-created-and-bound-to-the-servers-kubernetes-serviceaccount"},"A GCP service account was created and bound to the server's Kubernetes ServiceAccount"),(0,r.yg)("p",null,"Let's inspect the created service account:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'gcloud iam service-accounts list --filter="otr-"\n')),(0,r.yg)("h4",{id:"the-kubernetes-serviceaccount-was-annotated-with-the-role-arn"},"The Kubernetes ServiceAccount was annotated with the role ARN"),(0,r.yg)("p",null,"The credentials operator automatically annotated the Kubernetes ServiceAccount for the server pod with the newly created GCP service account."),(0,r.yg)("p",null,"Let's look at the service account:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get serviceaccount -n otterize-tutorial-gcp-iam server -o yaml\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    # highlight-next-line\n    iam.gke.io/gcp-service-account:\n    # highlight-next-line\n      otr-demo-cluster-otteri-3f630f@otterize-gcp-demo.iam.gserviceaccount.com\n  name: server\n")),(0,r.yg)("h3",{id:"apply-intents-to-create-the-necessary-iam-policy"},"Apply intents to create the necessary IAM policy"),(0,r.yg)("p",null,"By annotating the pod, we've created a GCP service account. We now need to specify what we need to access, and the intents operator will bind permissions accordingly."),(0,r.yg)("p",null,"We will specify the following ClientIntents, granting admin permission to the GCS bucket, and it's nested resources."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v2beta1\nkind: ClientIntents\nmetadata:\n  name: server\n  namespace: otterize-tutorial-gcp-iam\nspec:\n  workload:\n    name: server\n    kind: Deployment\n  targets:\n    - gcp:\n        resource: projects/_/buckets/otterize-tutorial-bucket*\n        permissions:\n          - "storage.admin"\n')),(0,r.yg)("p",null,"To apply these intents, run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-tutorial-gcp-iam -f ${ABSOLUTE_URL}/code-examples/gcp-iam-gke/clientintents.yaml\n")),(0,r.yg)("h3",{id:"the-server-can-now-upload-files-to-gcs"},"The server can now upload files to GCS!"),(0,r.yg)("p",null,"Let's look at the server logs again to see that no more errors are being reported:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f -n otterize-tutorial-gcp-iam deploy/server\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  # highlight-next-line\n  "status":200,\n  "host":"server",\n  "method":"POST",\n  "uri":"/upload"\n}\n')),(0,r.yg)("p",null,"Let's list the contents of the S3 bucket:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gsutil ls gs://$BUCKET_NAME\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gs://otterize-tutorial-bucket-1710338230/testfile.0.txt\ngs://otterize-tutorial-bucket-1710338230/testfile.1.txt\ngs://otterize-tutorial-bucket-1710338230/testfile.2.txt\ngs://otterize-tutorial-bucket-1710338230/testfile.3.txt\n")),(0,r.yg)("h3",{id:"whats-next"},"What's next?"),(0,r.yg)("p",null,"Try out some of the other quick tutorials to learn about how to use ClientIntents to manage network policies, Istio policies, PostgreSQL access, and more. You can use a single ClientIntents resource to specify all the access required for a pod."),(0,r.yg)("h2",{id:"teardown"},"Teardown"),(0,r.yg)("p",null,"To remove the deployed examples run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-gcp-iam\n")),(0,r.yg)("p",null,"To delete the cluster, if you created the one in this tutorial:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters delete otterize-iam-gke-tutorial\n")),(0,r.yg)("p",null,"To empty and delete the GCS bucket created for this tutorial:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"gsutil -m rm -r gs://$BUCKET_NAME\n")))}g.isMDXComponent=!0}}]);