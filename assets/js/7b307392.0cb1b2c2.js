"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2706],{5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>f});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return a?r.createElement(f,s(s({ref:t},u),{},{components:a})):r.createElement(f,s({ref:t},u))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6411:(e,t,a)=>{a.d(t,{A:()=>n});var r=a(6540);function n(e){let{items:t,colSize:a}=e,n="lg:tw-grid-cols-2 tw-gap-4 xs:tw-grid-cols-1 ";return"lg"===a?n="lg:tw-grid-cols-4 tw-gap-2 xs:tw-grid-cols-2":"md"===a&&(n="lg:tw-grid-cols-3 tw-gap-2 xs:tw-grid-cols-1 md:tw-grid-cols-2"),r.createElement("div",{className:`tw-grid ${n}`},t.map((e=>r.createElement("div",{key:e.title,className:"tw-relative tw-flex tw-items-center tw-space-x-3 tw-rounded-lg tw-border tw-border-solid tw-border-primary-500 tw-bg-white tw-px-6 tw-py-5 tw-shadow-sm focus-within:tw-ring-2 focus-within:tw-ring-indigo-500 focus-within:tw-ring-offset-2 hover:tw-border-primary-600 hover:tw-shadow-md"},e.icon&&r.createElement("div",{className:"tw-flex-shrink-0"},r.createElement("img",{width:"40px",className:"tw-max-h-10 tw-max-w-10",src:e.icon,alt:""})),r.createElement("div",{className:"tw-min-w-0 tw-flex-1"},r.createElement("a",{href:e.url,className:"focus:tw-outline-none hover:tw-no-underline"},r.createElement("span",{className:"tw-absolute tw-inset-0","aria-hidden":"true"}),r.createElement("div",{className:"tw-text-md tw-font-medium tw-text-gray-900 tw-break-keep"},e.title),e.description&&r.createElement("div",{className:"tw-text-sm tw-text-gray-500"},e.description)))))))}},1716:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,kafka_tutorials:()=>p,metadata:()=>l,toc:()=>u});var r=a(8168),n=(a(6540),a(5680)),o=a(6411);const s={sidebar_position:1,title:"Kafka | Overview",hide_table_of_contents:!0,hide_title:!0},i=void 0,l={unversionedId:"features/kafka/index",id:"features/kafka/index",title:"Kafka | Overview",description:"Otterize can build a map of your cluster, and enforce access between services using Kafka ACLs. Otterize is also able to map access to the Kafka topic and operation level, by reading Kafka access logs.",source:"@site/docs/features/kafka/index.mdx",sourceDirName:"features/kafka",slug:"/features/kafka/",permalink:"/features/kafka/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/kafka/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Kafka | Overview",hide_table_of_contents:!0,hide_title:!0},sidebar:"docSidebar",previous:{title:"Reference",permalink:"/features/azure-iam/reference"},next:{title:"Kafka topic-level access mapping",permalink:"/features/kafka/tutorials/k8s-kafka-mapping"}},c={},u=[{value:"Tutorials",id:"tutorials",level:3},{value:"How does Otterize work with Kafka?",id:"how-does-otterize-work-with-kafka",level:3}],p=[{title:"Kafka topic-level access mapping",description:"View Kafka network connections",url:"/features/kafka/tutorials/k8s-kafka-mapping"},{title:"Kafka access automation using Otterize Cloud mTLS",description:"Manage access to Kafka topics with Otterize Cloud mTLS",url:"/features/kafka/tutorials/k8s-kafka-mtls"},{title:"Kafka access automation using cert-manager mTLS",description:"Manage access to Kafka topics with a cert-manager",url:"/features/kafka/tutorials/k8s-kafka-mtls-cert-manager"}],m={toc:u,kafka_tutorials:p},d="wrapper";function f(e){let{components:t,...a}=e;return(0,n.yg)(d,(0,r.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"kafka"},"Kafka"),(0,n.yg)("p",null,"Otterize can build a map of your cluster, and enforce access between services using Kafka ACLs. Otterize is also able to map access to the Kafka topic and operation level, by reading Kafka access logs."),(0,n.yg)("h3",{id:"tutorials"},"Tutorials"),(0,n.yg)("p",null,"To learn how to use the Intents Operator and Credentials Operator to enforce access with Kafka ACLs, or how to map your cluster to the Kafka topic and operation level, try one of these quickstart tutorials."),(0,n.yg)(o.A,{items:p,colSize:"sm",mdxType:"DocsLinkCard"}),(0,n.yg)("h3",{id:"how-does-otterize-work-with-kafka"},"How does Otterize work with Kafka?"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"First, the cluster must have ",(0,n.yg)("a",{parentName:"li",href:"/overview/installation"},"Otterize installed"),"."),(0,n.yg)("li",{parentName:"ol"},"Configure the Otterize Intents Operator to manage a Kafka broker by declaring a ",(0,n.yg)("inlineCode",{parentName:"li"},"KafkaServerConfig"),". See the example yaml below.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: KafkaServerConfig\nmetadata:\n  name: kafkaserverconfig\n  namespace: kafka\nspec:\n  service:\n    name: kafka #name of the Kafka service broker\n  addr: kafka.kafka:9092\n")),(0,n.yg)("p",null,"Or, as a ready-to-paste command:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f ${ABSOLUTE_URL}/code-examples/kafka-mtls/kafkaserverconfig.yaml\n")),(0,n.yg)("p",null,"The Kafka broker must be configured with a superuser for the Intents Operator to be able to set ACLs, with the ACL authorizer enabled, and to use mTLS, which the Intents Operator and other clients will use to authenticate.\nHere's an example configuration based on the ",(0,n.yg)("inlineCode",{parentName:"p"},"values.yaml")," of the Bitnami Kafka Helm chart. To see a working example, check out the tutorials for Kafka."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'superUsers: User:CN=intents-operator.otterize-system\nallowEveryoneIfNoAclFound: true\npodAnnotations:\n  credentials-operator.otterize.com/cert-type: jks\n  credentials-operator.otterize.com/tls-secret-name: kafka-tls-secret\n  credentials-operator.otterize.com/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n# Authenticate clients using mTLS\nauth:\n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\n    jksTruststore: truststore.jks\n    jksKeystoreSAN: keystore.jks\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\n')),(0,n.yg)("p",null,"To acquire TLS credentials for another pod, specify a Pod annotation with the required TLS secret name."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'spec:\n  template:\n    metadata:\n      annotations:\n        # 1. Generate credentials as a secret called "client-credentials-secret":\n        credentials-operator.otterize.com/tls-secret-name: client-credentials-secret\n        ...\n    spec:\n      volumes:\n        # 2. Create a volume containing this secret:\n        - name: otterize-credentials\n          secret:\n            secretName: client-credentials-secret\n        ...\n      containers:\n        - name: client\n          ...\n          volumeMounts:\n            # 3. Mount volume into container\n            - name: otterize-credentials\n              mountPath: /var/otterize/credentials\n              readOnly: true\n')),(0,n.yg)("ol",{start:4},(0,n.yg)("li",{parentName:"ol"},"Once the Kafka clients are deployed with the mTLS credentials, they should be able to access topics as we have enabled ",(0,n.yg)("inlineCode",{parentName:"li"},"allowEveryoneIfNoAclFound"),". To begin enforcing, declare ClientIntents, which will cause the Intents Operator to configure ACLs allowing this access.")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace: otterize-tutorial-kafka-mtls\nspec:\n  service:\n    name: client\n  calls:\n    - name: kafka.kafka\n      type: kafka\n      kafkaTopics:\n        - name: mytopic\n          operations: [ produce,describe,consume ]\n        - name: transactions\n          operations: [ produce,describe,consume ]\n")))}f.isMDXComponent=!0}}]);