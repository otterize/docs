"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4194,8401],{9365:(e,t,a)=>{a.d(t,{A:()=>o});var n=a(6540),r=a(53);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:a},t)}},1470:(e,t,a)=>{a.d(t,{A:()=>N});var n=a(8168),r=a(6540),s=a(53),o=a(3104),l=a(6347),i=a(7485),c=a(1682),u=a(9466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.W6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,s=d(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[i,c]=g({queryString:a,groupId:n}),[p,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,u.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:n}),h=(()=>{const e=i??p;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),y(e)}),[c,y,s]),tabValues:s}}var h=a(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:l,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==l&&(p(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":l===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=y(e);return r.createElement("div",{className:(0,s.A)("tabs-container",b.tabList)},r.createElement(f,(0,n.A)({},e,t)),r.createElement(v,(0,n.A)({},e,t)))}function N(e){const t=(0,h.A)();return r.createElement(w,(0,n.A)({key:String(t)},e))}},1202:(e,t,a)=>{a.d(t,{A:()=>I});var n=a(8168),r=a(6540),s=a(2303),o=a(53),l=a(6058),i=a(7559),c=a(4291);const u={codeBlockContainer:"codeBlockContainer_APcc"};function p(e){let{as:t,...a}=e;const s=(0,l.A)(),p=(0,c.M$)(s);return r.createElement(t,(0,n.A)({},a,{style:p,className:(0,o.A)(a.className,u.codeBlockContainer,i.G.common.codeBlock)}))}const d={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function m(e){let{children:t,className:a}=e;return r.createElement(p,{as:"pre",tabIndex:0,className:(0,o.A)(d.codeBlockStandalone,"thin-scrollbar",a)},r.createElement("code",{className:d.codeBlockLines},t))}var g=a(6342),y=a(6591),h=a(8382);const b={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=a(6025);function v(e){let{line:t,classNames:a,showLineNumbers:s,getLineProps:l,getTokenProps:i}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=l({line:t,className:(0,o.A)(a,s&&b.codeLine)}),u=t.map(((e,t)=>r.createElement("span",(0,n.A)({key:t},i({token:e,key:t})))));return r.createElement("span",c,s?r.createElement(r.Fragment,null,r.createElement("span",{className:b.codeLineNumber}),r.createElement("span",{className:b.codeLineContent},u)):u,r.createElement("br",null))}var w=a(6861),N=a(1312),k=a(1473),C=a(4115);const E={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function S(e){let{code:t,className:a}=e;const[n,s]=(0,r.useState)(!1),l=(0,r.useRef)(void 0),i=(0,r.useCallback)((()=>{(0,w.A)(t),s(!0),l.current=window.setTimeout((()=>{s(!1)}),1e3)}),[t]);return(0,r.useEffect)((()=>()=>window.clearTimeout(l.current)),[]),r.createElement("button",{type:"button","aria-label":n?(0,N.T)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,N.T)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,N.T)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,o.A)("clean-btn",a,E.copyButton,n&&E.copyButtonCopied),onClick:i},r.createElement("span",{className:E.copyButtonIcons,"aria-hidden":"true"},r.createElement(k.A,{className:E.copyButtonIcon}),r.createElement(C.A,{className:E.copyButtonSuccessIcon})))}var T=a(5048);const L={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function A(e){let{className:t,onClick:a,isEnabled:n}=e;const s=(0,N.T)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return r.createElement("button",{type:"button",onClick:a,className:(0,o.A)("clean-btn",t,n&&L.wordWrapButtonEnabled),"aria-label":s,title:s},r.createElement(T.A,{className:L.wordWrapButtonIcon,"aria-hidden":"true"}))}function B(e){let{children:t,className:a="",metastring:s,title:i,showLineNumbers:u,language:m}=e;const{prism:{defaultLanguage:b,magicComments:w}}=(0,g.p)(),N=m??(0,c.Op)(a)??b,k=(0,l.A)(),C=(0,y.f)(),E=(0,c.wt)(s)||i,{lineClassNames:T,code:L}=(0,c.Li)(t,{metastring:s,language:N,magicComments:w}),B=(0,f.A)("/",{absolute:!0}).slice(0,-1),I=L.replaceAll("${ABSOLUTE_URL}",B),z=u??(0,c._u)(s);return r.createElement(p,{as:"div",className:(0,o.A)(a,N&&!a.includes(`language-${N}`)&&`language-${N}`)},E&&r.createElement("div",{className:d.codeBlockTitle},E),r.createElement("div",{className:d.codeBlockContent},r.createElement(h.Ay,(0,n.A)({},h.Gs,{theme:k,code:I,language:N??"text"}),(e=>{let{className:t,tokens:a,getLineProps:n,getTokenProps:s}=e;return r.createElement("pre",{tabIndex:0,ref:C.codeBlockRef,className:(0,o.A)(t,d.codeBlock,"thin-scrollbar")},r.createElement("code",{className:(0,o.A)(d.codeBlockLines,z&&d.codeBlockLinesWithNumbering)},a.map(((e,t)=>r.createElement(v,{key:t,line:e,getLineProps:n,getTokenProps:s,classNames:T[t],showLineNumbers:z})))))})),r.createElement("div",{className:d.buttonGroup},(C.isEnabled||C.isCodeScrollable)&&r.createElement(A,{className:d.codeButton,onClick:()=>C.toggle(),isEnabled:C.isEnabled}),r.createElement(S,{className:d.codeButton,code:I}))))}function I(e){let{children:t,...a}=e;const o=(0,s.A)(),l=function(e){return r.Children.toArray(e).some((e=>(0,r.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),i="string"==typeof l?B:m;return r.createElement(i,(0,n.A)({key:String(o)},a),l)}},9411:(e,t,a)=>{a.r(t),a.d(t,{Terminal:()=>u,assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=a(8168),r=(a(6540),a(5680));a(1202),a(1470),a(9365);const s={sidebar_position:2,title:"Just-in-time PostgreSQL access",image:"/img/quick-tutorials/postgres/social.png"},o=void 0,l={unversionedId:"features/postgresql/tutorials/postgres",id:"features/postgresql/tutorials/postgres",title:"Just-in-time PostgreSQL access",description:"This tutorial will deploy an example cluster to highlight Otterize's PostgreSQL capabilities. Within that cluster is a client service that hits an endpoint on a server, which then connects to a database. The server runs two different database operations:",source:"@site/docs/features/postgresql/tutorials/postgres.mdx",sourceDirName:"features/postgresql/tutorials",slug:"/features/postgresql/tutorials/postgres",permalink:"/features/postgresql/tutorials/postgres",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/postgresql/tutorials/postgres.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Just-in-time PostgreSQL access",image:"/img/quick-tutorials/postgres/social.png"},sidebar:"docSidebar",previous:{title:"PostgreSQL | Overview",permalink:"/features/postgresql/"},next:{title:"PostgreSQL table-level access mapping",permalink:"/features/postgresql/tutorials/postgres-mapping"}},i={},c=[{value:"1. Minikube Cluster",id:"1-minikube-cluster",level:4},{value:"2. Deploy Otterize",id:"2-deploy-otterize",level:4},{value:"Deploy tutorial services and request database credentials",id:"deploy-tutorial-services-and-request-database-credentials",level:3},{value:"View logs for the server",id:"view-logs-for-the-server",level:3},{value:"Deploy a PostgreSQLServerConfig to allow Otterize DB access",id:"deploy-a-postgresqlserverconfig-to-allow-otterize-db-access",level:3},{value:"Define your ClientIntents",id:"define-your-clientintents",level:3},{value:"View logs for the server",id:"view-logs-for-the-server-1",level:3}],u=e=>{let{children:t}=e;return(0,r.yg)("div",{style:{backgroundColor:"#eee",borderRadius:"5px",fontSize:"12px",fontWeight:"600",color:"darkgreen",padding:"1rem",fontFamily:"monospace, monospace"}},t)},p={toc:c,Terminal:u},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.yg)(d,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"overview"},"Overview"),(0,r.yg)("p",null,"This tutorial will deploy an example cluster to highlight Otterize's PostgreSQL capabilities. Within that cluster is a client service that hits an endpoint on a server, which then connects to a database. The server runs two different database operations:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"An ",(0,r.yg)("inlineCode",{parentName:"li"},"INSERT")," operation to append a table within the database"),(0,r.yg)("li",{parentName:"ol"},"A ",(0,r.yg)("inlineCode",{parentName:"li"},"SELECT")," operation to validate the updates.")),(0,r.yg)("p",null,"The server needs appropriate permissions to access the database. You could use one admin user for all services, which is insecure and is the cause for many security breaches. With Otterize, you can specify required access, and have Otterize create users and perform correctly scoped SQL GRANTs just in time, as the service spins up and down."),(0,r.yg)("p",null,"In this tutorial, we will:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Deploy an example cluster"),(0,r.yg)("li",{parentName:"ul"},"Deploy Otterize in our cluster and give it access to our database instance"),(0,r.yg)("li",{parentName:"ul"},"Declare a ClientIntents resource for the server, specifying required access"),(0,r.yg)("li",{parentName:"ul"},"See that the required access has been granted")),(0,r.yg)("h1",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("h4",{id:"1-minikube-cluster"},"1. Minikube Cluster"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Prepare a Kubernetes cluster with Minikube"),(0,r.yg)("p",null,"For this tutorial you'll need a local Kubernetes cluster. Having a cluster with a ",(0,r.yg)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"},"CNI")," that supports ",(0,r.yg)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"NetworkPolicies")," isn't required for this tutorial, but is recommended so that your cluster works with other tutorials."),(0,r.yg)("p",null,"If you don't have the Minikube CLI, first ",(0,r.yg)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"install it"),"."),(0,r.yg)("p",null,"Then start your Minikube cluster with Calico, in order to enforce network policies."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"minikube start --cpus=4 --memory 4096 --disk-size 32g --cni=calico\n"))),(0,r.yg)("h4",{id:"2-deploy-otterize"},"2. Deploy Otterize"),(0,r.yg)("p",null,"To deploy Otterize, head over to ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com"},"Otterize Cloud")," and associate a Kubernetes cluster on the ",(0,r.yg)("a",{parentName:"p",href:"https://app.otterize.com/integrations"},"Integrations page"),", and follow the instructions. If you already have a Kubernetes cluster connected, skip this step."),(0,r.yg)("h1",{id:"tutorial"},"Tutorial"),(0,r.yg)("h3",{id:"deploy-tutorial-services-and-request-database-credentials"},"Deploy tutorial services and request database credentials"),(0,r.yg)("p",null,"Next, set up the namespace used for our tutorial and deploy the client, server & database services in it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl create namespace otterize-tutorial-postgres\nkubectl apply -n otterize-tutorial-postgres -f ${ABSOLUTE_URL}/code-examples/postgres/client-server-database.yaml\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Expand to see the deployment YAML"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      annotations:\n        credentials-operator.otterize.com/user-password-secret-name: server-creds\n      labels:\n        app: server\n    spec:\n      serviceAccountName: server\n      containers:\n        - name: server\n          imagePullPolicy: Always\n          image: 'otterize/postgres-tutorial-server'\n          ports:\n            - containerPort: 80\n          env:\n            - name: DB_SERVER_USER\n              valueFrom:\n                secretKeyRef:\n                  name: server-creds\n                  key: username\n            - name: DB_SERVER_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: server-creds\n                  key: password\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: server\nspec:\n  type: ClusterIP\n  selector:\n    app: server\n  ports:\n    - name: http\n      port: 80\n      targetPort: 80\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: server\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          imagePullPolicy: Always\n          image: 'otterize/postgres-tutorial-client'\n          ports:\n            - containerPort: 80\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: database\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: database\n  template:\n    metadata:\n      labels:\n        app: database\n    spec:\n      containers:\n        - name: database\n          imagePullPolicy: Always\n          image: 'otterize/postgres-tutorial-database'\n          ports:\n            - containerPort: 5432\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: database\nspec:\n  selector:\n    app: database\n  ports:\n    - protocol: TCP\n      port: 5432\n      targetPort: 5432\n"))),(0,r.yg)("p",null,"Our server's Deployment spec specifies an annotation on its Pod, which requests that the Otterize operator provision a username and password for it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"  template:\n    metadata:\n      annotations:\n        credentials-operator.otterize.com/user-password-secret-name: server-creds\n")),(0,r.yg)("p",null,"This specifies that the secret ",(0,r.yg)("inlineCode",{parentName:"p"},"server-creds")," will be populated with keys containing the username and password used by this pod to connect to the database.\nThe secret will only be created by the Otterize operator after it is integrated with your database by applying a ",(0,r.yg)("inlineCode",{parentName:"p"},"PostgreSQLServerConfig")," resources."),(0,r.yg)("h3",{id:"view-logs-for-the-server"},"View logs for the server"),(0,r.yg)("p",null,"After the client, server, and database are up and running, we can see that the server does not have the appropriate access to the database by inspecting the logs with the following command."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl logs -f -n otterize-tutorial-postgres deploy/server\n")),(0,r.yg)("p",null,"Example log:"),(0,r.yg)(u,{mdxType:"Terminal"},"Unable to perform INSERT operation",(0,r.yg)("br",null),"Unable to perform SELECT operation"),(0,r.yg)("h3",{id:"deploy-a-postgresqlserverconfig-to-allow-otterize-db-access"},"Deploy a PostgreSQLServerConfig to allow Otterize DB access"),(0,r.yg)("p",null,"Let's apply a ",(0,r.yg)("inlineCode",{parentName:"p"},"PostgreSQLServerConfig")," so Otterize will know how to access our database instance."),(0,r.yg)("p",null,"First, create a Kuberentes secret containing the database credentials:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic postgres-tutorial-db-credentials -n otterize-tutorial-postgres --from-literal=username='otterize-tutorial' --from-literal=password='jeffdog523'\n")),(0,r.yg)("p",null,"In this tutorial, the PostgreSQL database comes with the predefined username & password, but for future uses a\nrole will have to be created in the database to grant Otterize access as well as the ability to configure other users."),(0,r.yg)("p",null,"Next, apply the ",(0,r.yg)("inlineCode",{parentName:"p"},"PostgreSQLServerConfig")," to the cluster:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"kubectl apply -n otterize-tutorial-postgres -f ${ABSOLUTE_URL}/code-examples/postgres/postgresqlserverconfig.yaml\n")),(0,r.yg)("p",null,"This ",(0,r.yg)("inlineCode",{parentName:"p"},"PostgreSQLServerConfig")," tells Otterize how to access a database instance named ",(0,r.yg)("inlineCode",{parentName:"p"},"postgres-tutorial-db"),", meaning that when intents\nare applied requesting access permissions to ",(0,r.yg)("inlineCode",{parentName:"p"},"postgres-tutorial-db"),", the Otterize operator will be able to configure\nthem:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: PostgreSQLServerConfig\nmetadata:\n  name: postgres-tutorial-db\nspec:\n  address: database.otterize-tutorial-postgres.svc.cluster.local:5432\n  credentials:\n    secretRef:\n      name: postgres-tutorial-db-credentials\n")),(0,r.yg)("h3",{id:"define-your-clientintents"},"Define your ClientIntents"),(0,r.yg)("p",null,"ClientIntents are Otterize\u2019s way of defining access through unique relationships, which lead to perfectly scoped access. In this example, we provide our ",(0,r.yg)("inlineCode",{parentName:"p"},"server")," workload the ability to insert and select records to allow it to access the database."),(0,r.yg)("p",null,"Below is our ",(0,r.yg)("inlineCode",{parentName:"p"},"intents.yaml")," file. As you can see, it is scoped to our database named ",(0,r.yg)("inlineCode",{parentName:"p"},"otterize-tutorial")," and our ",(0,r.yg)("inlineCode",{parentName:"p"},"public.example")," table. We also have limited the access to just ",(0,r.yg)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"INSERT")," operations. We could add more databases, tables, or operations if our service required more access."),(0,r.yg)("p",null,"Specifying the table and operations is optional. If you don't specify the table, access will be granted to all tables in the specified database. If you don't specify the operations, all operations will be allowed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: ClientIntents\nmetadata:\n  name: client-intents-for-server\n  namespace: otterize-tutorial-postgres\nspec:\n  service:\n    name: server\n  calls:\n    - name: postgres-tutorial-db # Same name as our PostgreSQLServerConfig metadata.name\n      type: database\n      databaseResources:\n        - databaseName: otterize-tutorial\n          table: public.example\n          operations:\n            - SELECT\n            - INSERT\n")),(0,r.yg)("p",null,"We can now apply our intents. Behind the scenes, the Otterize operator created the user for our ",(0,r.yg)("inlineCode",{parentName:"p"},"server")," workload and executed ",(0,r.yg)("inlineCode",{parentName:"p"},"GRANT")," queries on the database, making our ",(0,r.yg)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"INSERT")," errors disappear."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -n otterize-tutorial-postgres -f ${ABSOLUTE_URL}/code-examples/postgres/clientintents.yaml\n")),(0,r.yg)("h3",{id:"view-logs-for-the-server-1"},"View logs for the server"),(0,r.yg)("p",null,"We can now view the server logs once again. This time, we should see that the server has the appropriate access to the database:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl logs -f -n otterize-tutorial-postgres deploy/server\n")),(0,r.yg)("p",null,"Example log:"),(0,r.yg)(u,{mdxType:"Terminal"},"Successfully INSERTED into our table",(0,r.yg)("p",null,"Successfully SELECTED, most recent value:  2024-04-30T13:20:46Z")),(0,r.yg)("p",null,"That\u2019s it! If your service\u2019s functionality changes, adding or removing access is as simple as updating your ClientIntents definitions. For fun, try altering the ",(0,r.yg)("inlineCode",{parentName:"p"},"operations")," to just ",(0,r.yg)("inlineCode",{parentName:"p"},"SELECT")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"INSERT"),"."),(0,r.yg)("h1",{id:"teardown"},"Teardown"),(0,r.yg)("p",null,"To remove the deployed examples, run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl delete clientintents.k8s.otterize.com -n otterize-tutorial-postgres client-intents-for-server && \\\nkubectl delete namespace otterize-tutorial-postgres\n")))}m.isMDXComponent=!0}}]);