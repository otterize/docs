"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[918],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>f});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8103:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(8168),a=(r(6540),r(5680));const s={sidebar_position:3,title:"Reference"},o=void 0,i={unversionedId:"features/postgresql/reference",id:"features/postgresql/reference",title:"Reference",description:"PostgreSQLServerConfig example (YAML)",source:"@site/docs/features/postgresql/reference.mdx",sourceDirName:"features/postgresql",slug:"/features/postgresql/reference",permalink:"/features/postgresql/reference",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/features/postgresql/reference.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Reference"},sidebar:"docSidebar",previous:{title:"PostgreSQL table-level access mapping",permalink:"/features/postgresql/tutorials/postgres-mapping"},next:{title:"GitHub | Overview",permalink:"/features/github/"}},l={},c=[{value:"PostgreSQLServerConfig example (YAML)",id:"postgresqlserverconfig-example-yaml",level:3},{value:"ClientIntents example (YAML)",id:"clientintents-example-yaml",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h3",{id:"postgresqlserverconfig-example-yaml"},"PostgreSQLServerConfig example (YAML)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: PostgreSQLServerConfig\nmetadata:\n  name: postgres-tutorial-db # database instance name - should match the target in ClientIntents\n  namespace: otterize-tutorial-postgres\nspec:\n  address: <PGHOST:PGPORT> # Your Postgres address\n  credentials:\n    # Username Otterize will connect with & configure permissions as; optional, can be omitted if using a secretRef\n    username: <PGUSER>\n    # Password for the above username; optional, can be omitted if using a secretRef\n    password: <PGPASSWORD>\n    # Secret containing the database credentials; optional, can be omitted if using the above username & password fields\n    secretRef:\n      # Name of the secret containing the database credentials; required\n      name: postgres-credentials\n      # Namespace where the secret is stored; optional, defaults to the namespace of the PostgreSQLServerConfig\n      namespace: otterize-tutorial-postgres\n      # Key in the secret containing the username; optional, defaults to 'username'\n      usernameKey: username\n      # Key in the secret containing the password; optional, defaults to 'password'\n      passwordKey: password\n")),(0,a.yg)("h3",{id:"clientintents-example-yaml"},"ClientIntents example (YAML)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha3\nkind: ClientIntents\nmetadata:\n  name: client-intents-for-server\n  namespace: otterize-tutorial-postgres\nspec:\n  service:\n    # Service requiring access to PostgreSQL\n    name: server\n  calls:\n      # This name will need to match the PostgreSQLServerConfig metadata.name field\n    - name: postgres-tutorial-db\n      type: database\n      databaseResources:\n        - databaseName: otterize-tutorial\n          # Optional table name, if omitted all tables will be granted access\n          table: public.example\n          # Operations being granted, options include SELECT, INSERT, UPDATE, DELETE, ALL\n          operations:\n            - SELECT\n            - INSERT\n")))}m.isMDXComponent=!0}}]);