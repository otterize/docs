"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9158],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var i=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),u=r,y=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return t?i.createElement(y,a(a({ref:n},p),{},{components:t})):i.createElement(y,a({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(8168),r=(t(6540),t(5680));const o={sidebar_position:5,title:"Workload identity and resolution"},a=void 0,l={unversionedId:"reference/workload-identities/README",id:"reference/workload-identities/README",title:"Workload identity and resolution",description:"Otterize supports two approaches for specifying workload identity in Kubernetes: explicit and implicit.",source:"@site/docs/reference/workload-identities/README.mdx",sourceDirName:"reference/workload-identities",slug:"/reference/workload-identities/",permalink:"/reference/workload-identities/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/reference/workload-identities/README.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Workload identity and resolution"},sidebar:"docSidebar",previous:{title:"Troubleshooting",permalink:"/reference/troubleshooting/"},next:{title:"ClientIntents CRD",permalink:"/reference/ClientIntents CRD/"}},s={},d=[{value:"Explicitly specifying <code>Kind</code>",id:"explicitly-specifying-kind",level:2},{value:"Kubernetes workload identity resolution",id:"kubernetes-workload-identity-resolution",level:3}],p={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Otterize supports two approaches for specifying workload identity in Kubernetes: explicit and implicit."),(0,r.yg)("h2",{id:"explicitly-specifying-kind"},"Explicitly specifying ",(0,r.yg)("inlineCode",{parentName:"h2"},"Kind")),(0,r.yg)("p",null,"This approach requires specifying both the name, possibly with a namespace, and the kind of the workload in the intent, ensuring precise identification."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"   apiVersion: k8s.otterize.com/v2beta1\n   kind: ClientIntents\n   metadata:\n     name: client\n     namespace: otterize-tutorial-istio-mapping\n   spec:\n     workload:\n       name: client\n       kind: Deployment\n     targets:\n       - kubernetes:\n           name: server.example-ns\n           kind: Service\n       # This is equivalent to the above target\n       - service:\n           name: server.example-ns\n")),(0,r.yg)("p",null,"In the YAML above, the workload ",(0,r.yg)("inlineCode",{parentName:"p"},"client")," is a ",(0,r.yg)("inlineCode",{parentName:"p"},"Deployment")," in the namespace ",(0,r.yg)("inlineCode",{parentName:"p"},"otterize-tutorial-istio-mapping"),", and it intends to call the workload ",(0,r.yg)("inlineCode",{parentName:"p"},"server"),", which is a ",(0,r.yg)("inlineCode",{parentName:"p"},"Service"),", in the namespace ",(0,r.yg)("inlineCode",{parentName:"p"},"example-ns"),"."),(0,r.yg)("h3",{id:"kubernetes-workload-identity-resolution"},"Kubernetes workload identity resolution"),(0,r.yg)("p",null,"How do Otterize operators decide what is the identity of the workload that runs within the pod? The algorithm is as follows:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"If the pod has an ",(0,r.yg)("inlineCode",{parentName:"li"},"intents.otterize.com/workload-name")," annotation, its value is used as the workload name. (You can change which annotation is used by setting ",(0,r.yg)("inlineCode",{parentName:"li"},"global.workloadNameOverrideAnnotationName")," ","\u2014"," see the ",(0,r.yg)("a",{parentName:"li",href:"/reference/otterize-chart#global-parameters"},"docs"),".) This allows developers and\nautomations to explicitly name workloads, if needed. The value must not contain a period ",(0,r.yg)("inlineCode",{parentName:"li"},".")," as a period is used to separate workload name and namespace, when the workload is from a different namespace: ",(0,r.yg)("inlineCode",{parentName:"li"},"server.namespace"),"."),(0,r.yg)("li",{parentName:"ol"},"If there is no ",(0,r.yg)("inlineCode",{parentName:"li"},"intents.otterize.com/workload-name")," annotation, a recursive look-up is performed for the Kubernetes resource owner of\nthe pod, until the root resource is reached, and its name is used as the workload name. For example, if you have\na ",(0,r.yg)("inlineCode",{parentName:"li"},"Deployment")," named ",(0,r.yg)("inlineCode",{parentName:"li"},"checkoutservice"),", which then creates and owns a ",(0,r.yg)("inlineCode",{parentName:"li"},"ReplicaSet"),", which then creates and owns\na ",(0,r.yg)("inlineCode",{parentName:"li"},"Pod"),", then the workload name for that pod is ",(0,r.yg)("inlineCode",{parentName:"li"},"checkoutservice")," - same as the name of the ",(0,r.yg)("inlineCode",{parentName:"li"},"Deployment"),'. This is\nintended to capture the likely-more-meaningful "human name" of the workload. If the resulting workload name contains\na period ',(0,r.yg)("inlineCode",{parentName:"li"},"."),", it is replaced with an underscore ",(0,r.yg)("inlineCode",{parentName:"li"},"_"),". Periods are used in workload names to denote namespaces, e.g. ",(0,r.yg)("inlineCode",{parentName:"li"},"server.namespace"),".")))}m.isMDXComponent=!0}}]);