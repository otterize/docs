"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8595],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>f});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(8168),i=(n(6540),n(5680));const a={sidebar_position:5,title:"Service identities and resolution"},o=void 0,s={unversionedId:"reference/service-identities/README",id:"reference/service-identities/README",title:"Service identities and resolution",description:"Otterize uses universal service identities to refer to services, regardless of which infrastructure they run on. Every service has a name, and possibly a namespace, which is specified in Otterize client intents to request access to other services.",source:"@site/docs/reference/service-identities/README.mdx",sourceDirName:"reference/service-identities",slug:"/reference/service-identities/",permalink:"/reference/service-identities/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/reference/service-identities/README.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Service identities and resolution"},sidebar:"docSidebar",previous:{title:"API",permalink:"/reference/api/"},next:{title:"Troubleshooting",permalink:"/reference/troubleshooting/"}},c={},l=[{value:"Kubernetes service identity resolution",id:"kubernetes-service-identity-resolution",level:2}],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(p,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Otterize uses universal service identities to refer to services, regardless of which infrastructure they run on. Every service has a name, and possibly a namespace, which is specified in Otterize client intents to request access to other services."),(0,i.yg)("h2",{id:"kubernetes-service-identity-resolution"},"Kubernetes service identity resolution"),(0,i.yg)("p",null,"How do Otterize operators decide what is the name of the service that runs within the pod? The algorithm is as follows:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"If the pod has an ",(0,i.yg)("inlineCode",{parentName:"li"},"intents.otterize.com/service-name")," annotation, its value is used as the service name. (You can change which annotation is used by setting ",(0,i.yg)("inlineCode",{parentName:"li"},"global.serviceNameOverrideAnnotationName")," ","\u2014"," see the ",(0,i.yg)("a",{parentName:"li",href:"/reference/configuration/otterize-chart#global-parameters"},"docs"),".) This allows developers and\nautomations to explicitly name services, if needed. The value must not contain a period ",(0,i.yg)("inlineCode",{parentName:"li"},".")," as a period is used to separate service name and namespace, when the service is from a different namespace: ",(0,i.yg)("inlineCode",{parentName:"li"},"svcname.namespace"),"."),(0,i.yg)("li",{parentName:"ol"},"If there is no ",(0,i.yg)("inlineCode",{parentName:"li"},"intents.otterize.com/service-name")," annotation, a recursive look-up is performed for the Kubernetes resource owner of\nthe pod, until the root resource is reached, and its name is used as the service name. For example, if you have\na ",(0,i.yg)("inlineCode",{parentName:"li"},"Deployment")," named ",(0,i.yg)("inlineCode",{parentName:"li"},"checkoutservice"),", which then creates and owns a ",(0,i.yg)("inlineCode",{parentName:"li"},"ReplicaSet"),", which then creates and owns\na ",(0,i.yg)("inlineCode",{parentName:"li"},"Pod"),", then the service name for that pod is ",(0,i.yg)("inlineCode",{parentName:"li"},"checkoutservice")," - same as the name of the ",(0,i.yg)("inlineCode",{parentName:"li"},"Deployment"),'. This is\nintended to capture the likely-more-meaningful "human name" of the service. If the resulting service name contains\na period ',(0,i.yg)("inlineCode",{parentName:"li"},"."),", it is replaced with an underscore ",(0,i.yg)("inlineCode",{parentName:"li"},"_"),". Periods are used in service names to denote namespaces, e.g. ",(0,i.yg)("inlineCode",{parentName:"li"},"svcname.namespace"),".")))}u.isMDXComponent=!0}}]);